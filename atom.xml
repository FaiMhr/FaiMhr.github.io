<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FaiMhr&#39;s Blog</title>
  
  <subtitle>Code is magic.</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-03-28T02:30:30.566Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>马泓睿</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>通信协议（1）UART</title>
    <link href="http://example.com/2023/03/28/UART%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/"/>
    <id>http://example.com/2023/03/28/UART%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/</id>
    <published>2023-03-28T06:00:00.000Z</published>
    <updated>2023-03-28T02:30:30.566Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文将介绍UART通信协议。</p><p>说明：学习嵌入式五大通信协议之一的UART通信协议。</p><span id="more"></span><h1 id="什么是UART通信协议"><a href="#什么是UART通信协议" class="headerlink" title="什么是UART通信协议"></a>什么是UART通信协议</h1><p>UART 通用异步收发器（Universal Asynchronous Receiver Transmitter），是一种通用的<strong>串行</strong>、<strong>异步</strong>通讯总线，有两条数据线，可实现<strong>全双工</strong>的发送和接收。</p><p>在嵌入式系统中常用于主机与辅助设备之间的通信。（在嵌入式领域中使用最多的通信协议）</p><h1 id="通信基础概念"><a href="#通信基础概念" class="headerlink" title="通信基础概念"></a>通信基础概念</h1><h2 id="并行和串行"><a href="#并行和串行" class="headerlink" title="并行和串行"></a>并行和串行</h2><p>总线的作用：在计算机不同传递数据或信息。</p><p>总线是<strong>导线</strong>，通过传递高低电平的信号来实现信息的传递。高电平代表1，低电平代表0。</p><p>并行通信：总线在传递数据的过程中可以通过<strong>多根数据线</strong>把一个数据的多个位<strong>一次性</strong>发送。</p><p>串行通信：总线在传递数据的过程中可以通过<strong>一根数据线</strong>把一个数据<strong>依次</strong>发送。</p><p>并行通信优点在于快速，缺点是线比较多可能布线有一定难度，线之间存在干扰，小数据量下比较浪费。</p><p>串行通讯优点在于稳定，缺点是速度慢，数据大了传输的时间长。</p><p>嵌入式中串行总线用的多。</p><h2 id="单工和双工"><a href="#单工和双工" class="headerlink" title="单工和双工"></a>单工和双工</h2><p>单工通信：有一方是发送器，另一方是接收器。通信时只能由发送器发送数据给接收器。单向的</p><p>双工通信：双方可以发送数据也可以接收数据，但其中半双工里不能双方同时发送数据，只能一方发送一方接收。</p><h2 id="波特率"><a href="#波特率" class="headerlink" title="波特率"></a>波特率</h2><p>波特率用于描述UART通信时的通信速度，其单位为bps（bit per second）即每秒钟传送的bit的数量。</p><h1 id="UART帧格式-UART发送数据的格式"><a href="#UART帧格式-UART发送数据的格式" class="headerlink" title="UART帧格式 - UART发送数据的格式"></a>UART帧格式 - UART发送数据的格式</h1><p>起始位占1位，数据位（要发送的数据，5-8位，先发低位，后发高位位），校验位占1位（可有可无），停止位占1&#x2F;1.5或2位</p><p>当不发送数据时，规定数据线上的状态必须是高电平。</p><p>起始位的电平为低电平。</p><p>通常来说数据位发送8位（一个字节），但5-8位都可以。为什么不能发很多位是为了避免累计误差，由于双方时钟可能存在误差，会导致结果漏掉其中的一两位，发5-8位可以减小累计误差的影响，不至于影响一整个数据。</p><p>检验位为奇偶校验，统计数据中1的个数，如果是偶数就把校验位置为1，反之为0。</p><p>停止位的电平为高电平。</p><p>01和0011的波形是一样的，但是通过波特率能区分0和1的个数。所以双方的波特率必须一致，要事先约定好。</p><h1 id="UART硬件连接"><a href="#UART硬件连接" class="headerlink" title="UART硬件连接"></a>UART硬件连接</h1><p>TXD发送数据，RXD接收数据</p><h1 id="UART控制器"><a href="#UART控制器" class="headerlink" title="UART控制器"></a>UART控制器</h1><p>一般情况下处理器中都会集成UART控制器，使用UART进行通信的时候只需要对其内部的相关寄存器进行设置即可。</p><h2 id="引脚功能设置"><a href="#引脚功能设置" class="headerlink" title="引脚功能设置"></a>引脚功能设置</h2><p>设置引脚功能的实质是让引脚在芯片内部连接到某一个对应的控制器</p><p>串口控制器包含：</p><p>波特率产生器（Baud-rate generator）：控制串口发送数据或者接收数据的速度（需要时钟源来做精确控制，保证波特率的精准）</p><p>发送器（Transmitter）：控制发送数据</p><p>接收器（Receiver）：控制接收数据</p><p>控制单元（Control unit）：控制整个串口控制器的工作逻辑</p><p>主频是CPU的工作频率，串口控制器有自己的工作频率。</p><h2 id="工作逻辑"><a href="#工作逻辑" class="headerlink" title="工作逻辑"></a>工作逻辑</h2><p>发送器和接收器都包含一个队列（FIFO）和一个移位器，队列用来存放数据，移位器用来吧数据传出去。发送的数据首先写到发送的缓冲区（队列），再把要发送的数据包括起始位，校验位和停止位拷贝到移位器，移位器通过右移把数据一位一位的移动到发送的引脚并以电平信号发送出去。</p><p>CPU通过芯片内部总线读取接收队列中的数据；向发送队列写入数据；读写控制器，通过控制寄存器控制整个串口的控制逻辑</p><h1 id="UART寄存器"><a href="#UART寄存器" class="headerlink" title="UART寄存器"></a>UART寄存器</h1><p>不同的寄存器是在自己的基地址的基础上加上需实现功能的偏移量</p><p>单块开发板可以用回环模式（Loop-back Mode）查看是否串口是否设置正确，就是自己发送的数据，自己接收。</p><p>CPU和外围硬件的 <strong>交互模式</strong> 有三种轮询模式，中断模式，DMA模式。</p><p><strong>轮询模式</strong></p><p>数据从外面的芯片发过来，接收器接收了，CPU想要调用这个数据，CPU跑一段自己的程序就查看一下队列中有没有数据，没有就继续跑一段自己的程序再查看一下队列中有没有数据，直到队列中有数据，CPU读取数据。</p><p><strong>中断模式</strong></p><p>一旦队列接收到数据串口控制器就给CPU发送一个中断信号，此时CPU再去读数据</p><p><strong>DMA模式</strong></p><p>直接存储器访问。队列接收到数据后串口控制器直接访问存储器把数据放进去。</p><h1 id="程序思路"><a href="#程序思路" class="headerlink" title="程序思路"></a>程序思路</h1><p>1、定义接收引脚和发送引脚</p><p>要先把低八位清零再设置</p><p>2、设置帧格式</p><p>3、设置数据交互模式</p><p>4、设置波特率</p><p>5、设置循环将发送的数据写入发送寄存器中</p><p><strong>问：为什么只写发送程序电脑接收到的和发送的数据不一样？</strong></p><p>因为在没有限制的情况下CPU往寄存器中写数据的速度和寄存器往外发数据的速度是不一样的。</p><p>解决方法：判断发送器是否是空闲的，空闲了CPU再发。（芯片内部有只读寄存器能判断）</p><p><strong>题外话：</strong>在SecureCRT中看到的显示内容，其实是开发板返回的内容，看到显示的内容和输入的内容一致只是开发板返回了相同的内容。</p><h1 id="输入输出重定向"><a href="#输入输出重定向" class="headerlink" title="输入输出重定向"></a>输入输出重定向</h1><h2 id="如何让串口发送字符串"><a href="#如何让串口发送字符串" class="headerlink" title="如何让串口发送字符串"></a>如何让串口发送字符串</h2><p>首先需要把要发送字符串的首地址传到函数中，再通过发送函数把字符串的每一个字一个一个发出去。</p><p>举例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void UART_Send_Str(char * pstr)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">while</span>(*pstr != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    UART_Send_Byte(*pstr++);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># pstr是字符串的首地址，*pstr是首地址对应的内容。</span></span><br></pre></td></tr></table></figure><h2 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h2><p>之前电脑安装了C库所以printf输出的内容通过显卡输出到显示屏上；在开发板没有安装C库之前在程序中自定义了printf函数，所以printf输出的内容通过开发板发送到UART上。</p><p>这就是输出重定向。<strong>主要用于系统移植</strong></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文将介绍UART通信协议。&lt;/p&gt;
&lt;p&gt;说明：学习嵌入式五大通信协议之一的UART通信协议。&lt;/p&gt;</summary>
    
    
    
    <category term="通信协议" scheme="http://example.com/categories/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/"/>
    
    
    <category term="通信协议" scheme="http://example.com/tags/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>数据在内存中的存储</title>
    <link href="http://example.com/2023/03/28/%E6%95%B0%E6%8D%AE%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8/"/>
    <id>http://example.com/2023/03/28/%E6%95%B0%E6%8D%AE%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8/</id>
    <published>2023-03-28T02:00:00.000Z</published>
    <updated>2023-03-28T02:25:36.560Z</updated>
    
    <content type="html"><![CDATA[<h1 id="整数数据类型在内存中的存储"><a href="#整数数据类型在内存中的存储" class="headerlink" title="整数数据类型在内存中的存储"></a>整数数据类型在内存中的存储</h1><h2 id="原码"><a href="#原码" class="headerlink" title="原码:"></a>原码:</h2><p>一组二进制数</p><h2 id="反码"><a href="#反码" class="headerlink" title="反码:"></a>反码:</h2><p>只要硬件电路中有加法器，计算机就能做减法。</p><p><strong>正数的反码和原码一样。</strong>(正数没有反码，或不需要反码，但为了定义上完整所以规定正数的反码和原码相同)</p><p><strong>负数的反码，除了符号位外，是对其原码逐位取反。</strong></p><p>注: 符号位存在于有符号数据类型中，无符号数据类型没有符号位。符号位指的是数据的最高位(也就是最左边的一位)。<strong>当符号位是1时，表示这个有符号数据类型是负数</strong>。</p><h2 id="补码"><a href="#补码" class="headerlink" title="补码:"></a>补码:</h2><p><strong>正数的补码和原码一样。</strong></p><p><strong>负数的补码是在其反码的的末位加1。</strong></p><p>例子: 假设a,b都为正数 a - b &#x3D; a + b的补码 &#x3D; a + ( b的反码 + 1 )</p><p>对于补码，有一种投机取巧的方式，即补码是在原码的基础上从最右边开始算，遇到第一个1后，后面的所有数（符号位除外）都取反，如源码：10101010的补码：11010110( 右边第一个1开始除符号位外，都取反 )。</p><p><strong>对于所有的数在计算机中，数值的存储都是以补码存储的</strong></p><p>所以如果是八位的话能表示的最小整数为 10000000(补码) &#x3D; -1*2<sup>7</sup> &#x3D; -128；能表示对最大整数为  01111111(原码&#x2F;补码) &#x3D; 2<sup>7</sup> - 1 &#x3D; 127；</p><p><strong>注意: 这里的正数是从0到127，有128个数。负数时从-128到-1，有128个数。</strong></p><p>-127的补码 &#x3D; 10000001: 原码: 11111111</p><p>10000000(补码) - 1 &#x3D; 111111111(反码) 反码取反 &#x3D; 10000000(原码)</p><p>所以10000000 &#x3D; -0 (-0&#x3D;0)，但是在计算机里面，由于是补码储存，所以规定-0就是-128。</p><p>注: 最小值-128的原码、反码、补码分别为10000000、11111111、10000000</p><h2 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h2><p>数据在内存中的存储方式并不是我们想象的那样，而是从右向左进行存储的。其实计算机中存储数据是有两种模式的，一种是 <strong>大端模式</strong> ，一种是 <strong>小端模式</strong> 。</p><p>十六进制是0x12 34 56 78，则78属于低位字节，12属于高位字节。</p><h3 id="大端模式"><a href="#大端模式" class="headerlink" title="大端模式"></a>大端模式</h3><p><strong>大端模式</strong>: Big-Endian就是<strong>高位字节排放在内存的低地址端</strong>，低位字节排放在内存的高地址端。</p><p>（其实大端模式才是我们直观上认为的模式，和字符串存储的模式相类似）地址由小向大增加，而数据从高位往低位放</p><p>低地址 ————&gt; 高地址</p><p>0x12 | 0x34 | 0x56 | 0x78</p><h3 id="小端模式"><a href="#小端模式" class="headerlink" title="小端模式"></a>小端模式</h3><p><strong>小端模式</strong>: Little-Endian就是<strong>低位字节排放在内存的低地址端</strong>，高位字节排放在内存的高地址端。</p><p>低地址 ————&gt; 高地址</p><p>0x78 | 0x56 | 0x34 | 0x12</p><h1 id="浮点数据类型在内存中的存储"><a href="#浮点数据类型在内存中的存储" class="headerlink" title="浮点数据类型在内存中的存储"></a>浮点数据类型在内存中的存储</h1><p>根据国际标准IEEE（电气和电子工程协会） 754，任意一个二进制浮点数V可以表示成下面的形式：</p><p><strong>(-1)^S * M * 2^E</strong> </p><p>(-1)^s表示符号位，当s&#x3D;0，V为正数；当s&#x3D;1，V为负数。</p><p>M表示有效数字，大于等于1，小于2。</p><p>2^E表示指数位。</p><p>以9.0为例,首先我们写出9的二进制是1001，然后再写出小数点右边的二进制，所以最后是1001.0，小数点后的二进制刚开始权重是 2<sup>−1</sup> , 然后 2<sup>−2</sup> 这样，例如 5.5 就是 5 的二进制是 101 ，然后小数点后是 1 ，因为 1<em>2<sup>−1</sup> &#x3D; 0.5 。回到 1001.0 ，把 1001.0 写成科学计算法的形式，就是 1.001</em>2^3 ，最后化成标准就是 (-1)^0<em>1.001</em>2^3 ，此时 S &#x3D; 0，M &#x3D; 1.001，E &#x3D; 3。</p><p>那S，M，E在内存中是怎么存储的？</p><p>IEEE 754规定：</p><p>对于32位的浮点数，最高的1位是符号位s，接着的8位是指数E，剩下的23位为有效数字M。</p><p>对于64位的浮点数，最高的1位是符号位S，接着的11位是指数E，剩下的52位为有效数字M。</p><p>IEEE 754对M和E有特别的规定，这里就暂时不说了，感兴趣可以自己去查下。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;整数数据类型在内存中的存储&quot;&gt;&lt;a href=&quot;#整数数据类型在内存中的存储&quot; class=&quot;headerlink&quot; title=&quot;整数数据类型在内存中的存储&quot;&gt;&lt;/a&gt;整数数据类型在内存中的存储&lt;/h1&gt;&lt;h2 id=&quot;原码&quot;&gt;&lt;a href=&quot;#原码&quot; cla</summary>
      
    
    
    
    <category term="计算机" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="计算机" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>树莓派Hexo博客搭建</title>
    <link href="http://example.com/2023/03/17/%E6%A0%91%E8%8E%93%E6%B4%BEHexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2023/03/17/%E6%A0%91%E8%8E%93%E6%B4%BEHexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</id>
    <published>2023-03-17T08:51:00.000Z</published>
    <updated>2023-03-24T03:07:42.161Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文将介绍如何使用Hexo+Github搭建个人博客(适用于Linux)。</p><p>说明：本片文章参考了CSDN，知乎，他人博客。特别感谢CSDN<a href="https://blog.csdn.net/qq_42293280/article/details/114487698?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-114487698-blog-104490335.pc_relevant_3mothn_strategy_recovery&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-114487698-blog-104490335.pc_relevant_3mothn_strategy_recovery&utm_relevant_index=2">树莓派搭建个人博客</a>的作者 周-周 ，知乎<a href="https://zhuanlan.zhihu.com/p/26625249">GitHub+Hexo 搭建个人网站详细教程</a>的作者 知乎用户wdnLIq，个人博客<a href="https://homepea.top/2020/02.Hexo+Next/#more">记录Hexo建站</a>的作者Homepea。写这篇文章的目的在于记录下自己搭建Hexo博客的过程。</p><span id="more"></span><h1 id="创建GitHub的个人仓库"><a href="#创建GitHub的个人仓库" class="headerlink" title="创建GitHub的个人仓库"></a>创建GitHub的个人仓库</h1><p>登录到<a href="https://github.com/">GitHub</a>，如果没有Github账号先<a href="https://github.com/signup?source=login">注册</a>，<a href="https://github.com/login">登录</a>完成后看到界面右上角有个 <strong>+</strong> 号，点击 <strong>+</strong> 号会有一个下拉菜单，点击 <strong>New repository</strong> 创建个人仓库。</p><p>[图片待更新]</p><p>进入 <strong>Create a new repository</strong> 界面，下方有一个 <strong>Repository name</strong> 在下面方框内输入仓库名: 用户名.github.io(注意:必须以.github.io结尾，这是固定写法)。例如: faimhr.github.io</p><p>[图片待更新]</p><h1 id="相关软件配置"><a href="#相关软件配置" class="headerlink" title="相关软件配置"></a>相关软件配置</h1><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>用putty进入终端输入以下命令，安装git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p>注: git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。是Linux  Torvalds为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件。</p><p>在终端输入一下命令修改全局用户名(需要修改双引号中的内容)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你的GitHub/Gitee用户名&quot;</span>  </span><br><span class="line">git config --global user.email <span class="string">&quot;你的GitHub/Gitee邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>在终端输入以下命令查看是否修改成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure><p>如果能看到刚刚输入的 <strong>用户名和邮箱</strong> ，说明已经修改完成了。</p><p>[图片待更新]</p><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>首先查看树莓派的架构，树莓派终端输入命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uname</span> -a</span><br></pre></td></tr></table></figure><p>[图片待更新]</p><p>此处armv71表示是armv7架构的，记住这个下一步会用到。</p><p>登录<a href="https://nodejs.org/en/download">Nood.js官网</a>找到对应的型号。</p><p>目前最新的版本是 <strong>18.15.0</strong> ，可以选择其他的版本只需要修改版本号就行。(如果最新版本安装不成功也可以试试其他的版本)</p><p>在终端输入以下命令: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v18.15.0/node-v18.15.0-linux-armv7l.tar.xz</span><br></pre></td></tr></table></figure><p>由于是国外网站下载可能会比较慢，可以使用国内的镜像进行下载。</p><p>在终端中输入以下命令: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://cdn.npm.taobao.org/dist/node/latest-v18.x/node-v18.15.0-linux-armv7l.tar.xz</span><br></pre></td></tr></table></figure><p>下载完成后，会得到一个二进制压缩包，需要对其进行解压。</p><p>在终端中输入以下命令: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xz -d node-v18.15.0-linux-armv7l.tar.xz &amp;&amp; tar -xavf node-v18.15.0-linux-armv7l.tar</span><br></pre></td></tr></table></figure><p>如果失败请尝试以下命令: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo xz -d node-v18.15.0-linux-armv7l.tar.xz &amp;&amp; sudo tar -xavf node-v18.15.0-linux-armv7l.tar</span><br></pre></td></tr></table></figure><p>如果还不成功建议尝试其他版本，参考文章使用了 <strong>v14.15.4</strong> </p><p>解压后，将解压文件移动到 <strong>&#x2F;usr&#x2F;local&#x2F;node</strong> 下，在终端输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mv</span> ./node-v18.15.0-linux-armv7l /usr/local/node</span><br></pre></td></tr></table></figure><p>然后为 <strong>node</strong> 和 <strong>npm</strong> 建立软连接，在终端输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s /usr/local/node/bin/node /usr/bin/node</span><br><span class="line">sudo <span class="built_in">ln</span> -s /usr/local/node/bin/npm /usr/bin/npm</span><br><span class="line"><span class="comment">#这类似于Windows中的快捷方式</span></span><br></pre></td></tr></table></figure><p>可以通过以下命令检测Node.js是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>可以通过以下命令检测npm是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>显示正确的版本号后说明已经完成了安装，接下来准备安装 <strong>hexo</strong> 博客框架。</p><h1 id="Hexo博客搭建"><a href="#Hexo博客搭建" class="headerlink" title="Hexo博客搭建"></a>Hexo博客搭建</h1><p>首先在终端输入以下命令回到树莓派根目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span></span><br></pre></td></tr></table></figure><p>接下来需要给Hexo创建一个文件夹来存放博客相关的内容，文件夹的名字可以任意，这里以blog为例。</p><p>在终端输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> blog</span><br></pre></td></tr></table></figure><p>在终端输入以下命令进入刚刚创建的文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure><p>进入文件夹后将初始化Hexo，在终端中输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hexo init</span><br></pre></td></tr></table></figure><p>启动Hexo，在终端中输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hexo s</span><br></pre></td></tr></table></figure><p>终端会出现一个 <strong>网址</strong> ，并说按 <strong>ctrl + c</strong> 退出</p><p>[图片待更新]</p><p>此时在退出前可以在 <strong>树莓派浏览器</strong> 输入 <strong>该网址</strong> 查看搭建的博客，也可以在与树莓派连接 <strong>同一个网络电脑的浏览器</strong> 上输入 <strong>树莓派IP:4000</strong> 查看搭建的博客。</p><p>打开后我们可以看到一篇Hexo自动生成的标题为 <strong>Hello World</strong> 的文章，简述了Hexo的用法，可以自行查看。</p><p>[图片待更新]</p><p>回到终端按 <strong>ctrl + c</strong> 退出浏览，此时就完成了Hexo本地的搭建，接下来将把本地的Hexo部署到一开始创建的GitHub个人仓库中，实现可以随时随地打开个人博客。</p><h1 id="本地的Hexo部署到GitHub个人仓库中"><a href="#本地的Hexo部署到GitHub个人仓库中" class="headerlink" title="本地的Hexo部署到GitHub个人仓库中"></a>本地的Hexo部署到GitHub个人仓库中</h1><p>首先在终端输入以下命令进入博客的根目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure><p>注意：如果此时终端还在其他文件夹中，必须先回到根目录下再进行以上操作。</p><p>进入博客根目录后，需要安装一个Hexo的上传插件(保证后面本地到GitHub的部署)，在终端中输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><p>安装完成后，需要修改Hexo配置文件指定仓库路径</p><p>我们先找到博客根目录下的配置文件 <strong>_config.yml</strong> ，后面我们统一称其为 <strong>站点配置文件</strong></p><p>在博客根目录下输入以下命令可以查看该文件夹下 <strong>除了隐藏文件的所有文件</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p>输入以下命令可以查看该文件夹下 <strong>所有文件</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -a</span><br></pre></td></tr></table></figure><p>此时我们一定能看到一个名字是 <strong>_config.yml</strong> 的文件，输入以下命令进入该文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano _config.yml</span><br></pre></td></tr></table></figure><p>进入_config.yml后，找到deploy: (可以用 <strong>ctrl + w</strong> 搜索)，在后面修改或增加以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/你的账户名/你的账户名.github.io</span><br><span class="line">  branch: master</span><br><span class="line">  <span class="comment"># 注意这里的冒号后要加空格！！！</span></span><br></pre></td></tr></table></figure><p>修改完成后，按 <strong>ctrl + x</strong> 退出文件编辑，提示是否保存，输入 <strong>y</strong> 保存，提示文件名是否修改，不修改直接按 <strong>回车</strong>。</p><p>完成后在终端中输入以下命令，确保终端在博客的根目录下，这时终端的确是在博客根目录下，但以后自己修改其他文件的时候可能结束编辑后不在这个位置了， <strong>要对博客进行部署操作要在博客根目录文件夹下进行操作！</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure><p>然后在终端依次执行以下三条命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo hexo clean</span><br><span class="line">sudo hexo g</span><br><span class="line">sudo hexo s</span><br></pre></td></tr></table></figure><p>当然也可以直接输入以下命令，它会自动依次执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hexo clean &amp;&amp; sudo hexo g &amp;&amp; sudo hexo s</span><br></pre></td></tr></table></figure><p>sudo hexo clean 是用于清理缓存文件</p><p>sudo hexo g 是用于重新生成静态文件</p><p>sudo hexo s 是用于启动本地服务器</p><p>以上三步完成后按 <strong>ctrl + c</strong> 退出</p><p>在终端中输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hexo d</span><br></pre></td></tr></table></figure><p>sudo hexo d 是用于把静态文件部署到设定的仓库</p><p>如果没有错误的话，终端上会要求输入你的GitHub用户名和密码，此处需要注意了。</p><p>在2021年8月14日开始github官方就加强安全访问。不能通过原有账号密码git访问，密码需要用官方的token或者采用ssh公私钥访问。否则会出现：鉴权失败（用户名密码错误）</p><p>[图片待更新]</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">官方原话：</span><br><span class="line">近年来，GitHub 客户受益于 GitHub.com 的许多安全增强功能，例如双因素身份验证、登录警报、经过验证的设备、防止使用泄露密码和 WebAuthn 支持。 这些功能使攻击者更难获取在多个网站上重复使用的密码并使用它来尝试访问您的 GitHub 帐户。 尽管有这些改进，但由于历史原因，未启用双因素身份验证的客户仍能够仅使用其GitHub 用户名和密码继续对 Git 和 API 操作进行身份验证。</span><br><span class="line">从 2021 年 8 月 13 日开始，我们将在对 Git 操作进行身份验证时不再接受帐户密码，并将要求使用基于令牌（token）的身份验证，例如个人访问令牌（针对开发人员）或 OAuth 或 GitHub 应用程序安装令牌（针对集成商） GitHub.com 上所有经过身份验证的 Git 操作。 您也可以继续在您喜欢的地方使用 SSH 密钥</span><br></pre></td></tr></table></figure><p>那么就需要获得token或者ssh公私钥。</p><p>如何获得token</p><p>登录github点击 <strong>右上角头像旁边的下拉菜单</strong> 选择 <strong>setting-&gt; Developer Settings-&gt; Prosonal access tokens -&gt; Tokens(classic)</strong> 点进去右边会看到 <strong>Generate new token</strong> ，点击并选择 <strong>Generate new token(classic)</strong> 进去后 <strong>Note栏</strong> <strong>任意</strong>取一个名字就行，<strong>Expiration</strong> 需要选择一个有效期，按自己的喜好选就行，嫌麻烦就选 No Expiration ，选完后拉到最下面点击 <strong>Generate token</strong> 这样创建一个新token，此时页面会跳转，需要把新token复制下来保存好就行了，每次更新复制粘贴就行了。</p><p>[图片待更新]</p><p>此时回到终端输入GitHub用户名和token即可。</p><p>注：网上有能直接使用公钥跳过每次输入用户名和密码的步骤，但是我没有成功，还不知道问题在哪里，要是找到问题后面再更新。</p><p>终端出现 <strong>INFO Deplay done: git</strong> 说明已经部署成功了。</p><p>此时可以在任意手机电脑的浏览器输入仓库的名字就能随时进行访问了。</p><p>到这里 GitHub+Hexo 搭建的个人网站就顺利完成了！后面就可以在 <strong>blog&#x2F;source&#x2F;_posts&#x2F;</strong> 这个文件夹下写文章了，所有博客都是以 <strong>.md</strong> 格式保存的。当然hexo博客支持很多不同的主题，可以对自己的博客进行美化，这就后面在Hexo博客美化文章中更新吧。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文将介绍如何使用Hexo+Github搭建个人博客(适用于Linux)。&lt;/p&gt;
&lt;p&gt;说明：本片文章参考了CSDN，知乎，他人博客。特别感谢CSDN&lt;a href=&quot;https://blog.csdn.net/qq_42293280/article/details/114487698?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-114487698-blog-104490335.pc_relevant_3mothn_strategy_recovery&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-114487698-blog-104490335.pc_relevant_3mothn_strategy_recovery&amp;utm_relevant_index=2&quot;&gt;树莓派搭建个人博客&lt;/a&gt;的作者 周-周 ，知乎&lt;a href=&quot;https://zhuanlan.zhihu.com/p/26625249&quot;&gt;GitHub+Hexo 搭建个人网站详细教程&lt;/a&gt;的作者 知乎用户wdnLIq，个人博客&lt;a href=&quot;https://homepea.top/2020/02.Hexo+Next/#more&quot;&gt;记录Hexo建站&lt;/a&gt;的作者Homepea。写这篇文章的目的在于记录下自己搭建Hexo博客的过程。&lt;/p&gt;</summary>
    
    
    
    <category term="Hexo" scheme="http://example.com/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>树莓派初始化</title>
    <link href="http://example.com/2023/03/17/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>http://example.com/2023/03/17/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%9D%E5%A7%8B%E5%8C%96/</id>
    <published>2023-03-17T08:51:00.000Z</published>
    <updated>2023-03-19T13:39:57.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文将介绍如何在树莓派上安装系统。</p><p>说明：这是一篇之前写过的文章，最近搭建了个人博客顺便搬过来。</p><span id="more"></span><h1 id="树莓派环境搭建"><a href="#树莓派环境搭建" class="headerlink" title="树莓派环境搭建"></a>树莓派环境搭建</h1><h2 id="下载树莓派官方系统"><a href="#下载树莓派官方系统" class="headerlink" title="下载树莓派官方系统"></a>下载树莓派官方系统</h2><p>官方地址：<a href="https://www.raspberrypi.org/software/operating-systems/">https://www.raspberrypi.org/software/operating-systems/</a></p><p>选择自己需要的系统（支持pc，mac，pi），这里我选择的是 <strong>Raspberry Pi OS with desktop</strong> 这个带桌面的。直接点击 <strong>Archive</strong> 进入后，再点击进入 <strong>最新的日期</strong> 的文件夹，最后选择 <strong>.img.xz</strong> 结尾的文件（size最大的）下载。<br>注：.xz是压缩方式的一种</p><p>由于这个是国外的网站下载速度可能会比较慢，要是太慢可以选择国内的镜像源： </p><ol><li>TUNA 镜像站（位于北京）：<a href="https://mirrors.tuna.tsinghua.edu.cn/raspberry-pi-os-images/">https://mirrors.tuna.tsinghua.edu.cn/raspberry-pi-os-images/</a></li><li>SJTUG 镜像站（位于上海）：<a href="https://mirrors.sjtug.sjtu.edu.cn/raspberry-pi-os-images/">https://mirrors.sjtug.sjtu.edu.cn/raspberry-pi-os-images/</a></li></ol><p>找到raspbian。</p><ol><li>raspbian&#x2F; 对应官网上的 Raspberry Pi OS with desktop 是带桌面的树莓派系统</li><li>raspbian_full&#x2F; 对应官网上的 Raspberry Pi OS with desktop and recommended software 是带桌面和推荐软件的树莓派操作系统</li><li>raspbian_lite&#x2F; 对应官网上的 Raspberry Pi OS Lite 是精简版的树莓派系统</li></ol><h2 id="安装树莓派官方系统"><a href="#安装树莓派官方系统" class="headerlink" title="安装树莓派官方系统"></a>安装树莓派官方系统</h2><p>当下载好系统后我们就需要把系统安装到SD卡中。</p><p>第一步要将我们的SD卡格式化(主要确保SD卡里没东西，防止出错)。可以使用<a href="https://www.sdcard.org/">SD Card Formatter</a>(由于是国外网址可能会比较卡，百度下载也是一样的)或者电脑的格式化工具(我的电脑–右键–管理–磁盘管理)<br><strong>注：看清楚再格式化，别弄错盘了！！！</strong></p><p>第二步将下载好的系统镜像文件烧录进SD卡中。可以使用<a href="https://sourceforge.net/projects/win32diskimager/">Win32DiskImager</a>软件进行烧录。<br><strong>步骤：</strong> 打开Win32DiskImager软件，在映像文件那放入解压后的 <strong>.img</strong> 镜像文件，选择SD卡所在的磁盘，点击 <strong>写入</strong> 耐心等待即可。</p><h2 id="树莓派系统设置"><a href="#树莓派系统设置" class="headerlink" title="树莓派系统设置"></a>树莓派系统设置</h2><p>既然已经安装好了系统，之后只要稍加设置就可以愉快使用了。</p><p>如果现在手头正好有屏幕并且树莓派的mini HDMI线也有的话，可以直接将SD卡插入树莓派并连接上屏幕在屏幕上进行操作。</p><p>如果是没有屏幕的话，可以采用ssh进行连接。</p><p><strong>下面是讲解没有屏幕时的方法。</strong><br>第一步在SD卡上写入两个文件(烧录完成后SD卡上会出现的boot分区，如果没有，拔下读卡器重插一下)。</p><ol><li>第一个文件是一个名字为<strong>ssh</strong>的空白文件(即新建文本文档，将文件名改为ssh，<strong>千万注意没有后缀哦</strong>)</li><li>第二个文件是一个名字为<strong>wpa_supplicant.conf</strong>的文件(用写字板打开后，要在文件中写入一下内容)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">country=CN</span><br><span class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class="line">update_config=1</span><br><span class="line"></span><br><span class="line">network=&#123;</span><br><span class="line">    ssid=<span class="string">&quot;想要连接的WiFi名称&quot;</span></span><br><span class="line">    psk=<span class="string">&quot;想要连接的WiFi密码&quot;</span></span><br><span class="line">    key_mgmt=WPA-PSK //WiFi的加密方式(应该可以不写)</span><br><span class="line">    priority=1 //连接优先级，数字越大优先级越高(不可以是负数)</span><br><span class="line">    scan_ssid=1 //连接隐藏WiFi时需要指定该值为1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>第二步这两个文件设置完毕后将SD卡插到树莓派上就可以了。没有问题的话，在路由器管理或者手机热点里可以看到连接了一个raspberrypi的设备，需要查看它连接的 <strong>IP地址</strong> 之后ssh连接会用到。</p><p>第三步需要远程连接树莓派对其进行控制，可以使用<a href="https://www.putty.be/">PuTTy</a>进行ssh连接<br><strong>步骤：</strong> 进入PuTTY 在Host Name(or IP address)下方的方框中输入刚看到的IP地址 点击下方的Open</p><p>（若弹出任何窗口都不用管，选YES）在弹出的黑色窗口第一行输入当前设备名（第一次输入默认的是pi）pi, 回车 ，在第二行输入当前设备密码(第一次输入默认的是raspberry)raspberry(发现输入没有反应是正常的树莓派默认不会显示密码，我认为这个不好，后面可能会找找办法修改)，回车。这样就已经进入了设备。首次登陆会让你设置一个新密码，直接输入即可。</p><p>树莓派官方系统默认：<br><strong>用户名：pi</strong><br><strong>密码：raspberry</strong></p><p>ubunt系统默认：<br><strong>密码：ubuntu</strong></p><p>以上步骤完成后其实已经能对树莓派进行控制了。如果想远程连接到树莓派桌面请往下看，不需要的可以跳过。</p><p>第四步远程连接树莓派桌面，可以使用<a href="https://www.realvnc.com/en/connect/download/viewer/">VNC Viewer</a>,下载完成后回到 <strong>Putty</strong> 输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo raspi-config</span><br></pre></td></tr></table></figure><p>接下来按顺序选择Interfacing Options–&gt;回车–&gt;VNC–&gt;回车–&gt;yes–&gt;回车–&gt;y–&gt;回车 (若选错想回退，按向下方向键到最下面按Tab切换)</p><p>此时直接开启VNC若不显示屏幕则是分辨率的问题<br>再次使用 <strong>PuTTy</strong> 进入pi<br>输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo raspi-config</span><br></pre></td></tr></table></figure><p>接下来按照顺序选择Advanced Options–&gt;Resolution–&gt;选择合适的分辨率</p><p><strong>查的时候发现改完分辨率后再启动可能还会有点问题，这里暂时不写了，后面可能会更新。</strong></p><p>第五步按照pi的提示初始化系统。</p><p>第六步进行换源(由于国外源很慢，可以考虑使用国内的源这样会在下载的时候快点)</p><p>输入一下内容备份原文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line">sudo <span class="built_in">cp</span> /etc/apt/sources.list.d/raspi.list /etc/apt/sources.list.d/raspi.list.bak</span><br></pre></td></tr></table></figure><p>修改系统源文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>进入文件编辑模式，添加以下内容(将初始的源使用#注释掉，添加如下两行清华的镜像源)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main contrib non-free rpi</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main contrib non-free rpi</span><br></pre></td></tr></table></figure><p>编辑完成后使用快捷键ctrl+x退出编辑，输入y，保存更改。</p><p>更改系统源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/apt/sources.list.d/raspi.list</span><br></pre></td></tr></table></figure><p>进入文件编辑模式，添加以下内容(将初始的源使用#注释掉，添加如下两行清华的镜像源)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui</span><br></pre></td></tr></table></figure><p>执行更新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><p>注：如果更新后出现文件管理器闪退，或者桌面失去响应之类的问题。建议使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt full-upgrade</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文将介绍如何在树莓派上安装系统。&lt;/p&gt;
&lt;p&gt;说明：这是一篇之前写过的文章，最近搭建了个人博客顺便搬过来。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
</feed>
