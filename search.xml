<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>通信协议（5）Can</title>
    <url>/2023/04/10/Can%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文将介绍Can通信协议。</p>
<p>说明：学习嵌入式五大通信协议之一的Can通信协议。</p>
<span id="more"></span>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>CAN全称控制器局域网络（Controller Area Network），是 ISO 国际标准化的串行通信协议。在北美和西欧，CAN 总线协议已经成为汽车计算机控制系统和嵌入式工业控制局域网的标准总线，并且拥有以 CAN 为底层协议专为大型货车和重工机械车辆设计的 J1939 协议。</p>
<h1 id="网络层级"><a href="#网络层级" class="headerlink" title="网络层级"></a>网络层级</h1><p>应用层（具体数据）</p>
<p>链路层（将比特流组成帧数据，判断数据是否正常）</p>
<p>物理层（收发比特流的物理层）</p>
<p>注：Can协议中不需要自己设置数据格式，Can内部已经处理好了</p>
<h1 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h1><p>1、CPU与CAN控制器集成到一起、再外接CAN收发器；</p>
<p>2、另一种是CPU与CAN控制器分开的，使用的时候需要配置CAN接口电路。</p>
<h1 id="电平"><a href="#电平" class="headerlink" title="电平"></a>电平</h1><p>can总线采用差分电压传输数据，分别是CAN_H和CAN_L两根总线。总线上的信号电平分为这两条线之间的差分电压。</p>
<p>CAN总线具有两种逻辑电平：隐性电平和显性电平。</p>
<p>隐性电平：CAN_H和CAN_L之间的差分电压近似为0V，表示逻辑1</p>
<p>显性电平：CAN_H和CAN_L之间的差分电压近似为2～3V，表示逻辑0</p>
<p>CAN总线上的逻辑是“线与”的形式，显性电平可以覆盖隐性电平，因此0可以覆盖1。</p>
<h1 id="CAN标准帧"><a href="#CAN标准帧" class="headerlink" title="CAN标准帧"></a>CAN标准帧</h1><p>CAN没有地址的概念</p>
<p>起始帧（SOF）——仲裁段（ID）——RTR（远程帧）——IDE（扩展帧）——RB0（保留位）——DLC（数据长度位）——数据段（0-8个字节组成的要发送的数据）——CRC段（校验位）——CRC界定符（用于分隔CRC与ACK）——ACK槽（接收方应答位）——ACK界定符（用于分隔）——帧结束（EOF）</p>
<h1 id="CAN数据过滤-（这里听的时候不是很理解）"><a href="#CAN数据过滤-（这里听的时候不是很理解）" class="headerlink" title="CAN数据过滤 （这里听的时候不是很理解）"></a>CAN数据过滤 （这里听的时候不是很理解）</h1><p>分为两个模式：屏蔽位模式（用于组配）和标识符列表模式（用于单配）</p>
<h2 id="屏蔽位模式"><a href="#屏蔽位模式" class="headerlink" title="屏蔽位模式"></a>屏蔽位模式</h2><p>接收器标识符某位置0为忽略，置1为</p>
<h2 id="标识符列表模式"><a href="#标识符列表模式" class="headerlink" title="标识符列表模式"></a>标识符列表模式</h2><p>接收器标识符与需要接收的ID一致</p>
<h1 id="Can的特点"><a href="#Can的特点" class="headerlink" title="Can的特点"></a>Can的特点</h1><p>(1) 数据通信没有主从之分，任意一个节点可以向任何其他（一个或多个）节点发起数据通信，靠各个节点信息优先级先后顺序来决定通信次序，高优先级节点信息在134μs通信</p>
<p>(2) 多个节点同时发起通信时，优先级低的避让优先级高的，不会对通信线路造成拥塞</p>
<p>(3) 通信距离最远可达10KM(速率低于5Kbps)速率可达到1Mbps(通信距离小于40M）</p>
<p>(4) CAN总线传输介质可以是双绞线，同轴电缆。CAN总线适用于大数据量短距离通信或者长距离小数据量，实时性要求比较高，多主多从或者各个节点平等的现场中使用。</p>
<p>(5) CAN总线上同一个子网下设备的通信速度必须相同</p>
<p>(6) CAN总线上不同子网下的两个设备进行通信必须通过网关</p>
<p>(7) CAN总线上的设备可以自动进行错误检测，错误通知，错误恢复和故障隔离。当设备发生故障时，该设备会不断发送错误提示，其他设备将暂停发送数据；当一段时间过后设备故障未恢复会自动将自己隔离，断开与总线的连接，此时其他设备可以继续发送信息</p>
]]></content>
      <categories>
        <category>通信协议</category>
      </categories>
      <tags>
        <tag>通信协议</tag>
      </tags>
  </entry>
  <entry>
    <title>通信协议（3）I2C</title>
    <url>/2023/04/06/I2C%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文将介绍I2C通信协议。</p>
<p>说明：学习嵌入式五大通信协议之一的I2C通信协议。</p>
<span id="more"></span>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>I2C总线也称IIC总线是Philips公司在八十年代初推出的一种<strong>串行</strong>、<strong>半双工</strong>总线主要用于<strong>近距离</strong>、<strong>低速</strong>的<strong>芯片之间</strong>的通信；I2C总线有两根双向的信号线一根<strong>数据线SDA</strong>用于收发数据，一根<strong>时钟线SCL</strong>用于通信双方时钟的同步；I2C总线硬件结构简单，成本较低，因此在各个领域得到了广泛的应用。</p>
<p>I2C总线是一种<strong>多主机总线</strong>，连接在I2C总线上的器件分为主机和从机，<strong>主机有权发起和结束一次通信</strong>，而从机只能被主机呼叫；当总线上有多个主机同时启用总线时，I2C也具备冲突检测和仲裁的功能来防止错误产生；每个连接到I2C总线上的器件都有一个<strong>唯一的地址</strong>（7bit），且每个器件都可以作为主机也可以作为从机（<strong>同一时刻只能有一个主机</strong>），总线上的器件增加和删除不影响其他器件正常工作；I2C总线在通信时总线上发送数据的器件为发送器，接收数据的器件为接收器。</p>
<h1 id="I2C总线通信过程"><a href="#I2C总线通信过程" class="headerlink" title="I2C总线通信过程"></a>I2C总线通信过程</h1><p>1、主机发送起始信号启用总线</p>
<p>2、主机发送一个字节数据指明从机地址和后续字节的传送方向（也就是说明数据是主机给从机发还是从机给主机发），0表示主机给从机发，1表示从机给主机发</p>
<p>3、被寻址的从机发送应答信号回应主机</p>
<p>4、发送器发送一个字节数据</p>
<p>5、接收器发送应答信号回应发送器</p>
<p>6、循环步骤4、步骤5</p>
<p>n、通信完成后主机发送停止信号释放总线</p>
<h1 id="I2C总线寻址方式"><a href="#I2C总线寻址方式" class="headerlink" title="I2C总线寻址方式"></a>I2C总线寻址方式</h1><p>I2C总线上传送的数据是广义的，既包括地址，又包括真正的数据。</p>
<p>主机在发送起始信号后必须先发送一个字节的数据，该数据的高7位为从机地址，最低位表示后续字节的传送方向，‘0’表示主机发送数据，‘1’表示主机接收数据；总线上所有的从机接收到该字节数据后都将这7位地址与自己的地址进行比较，如果相同，则认为自己被主机寻址，然后再根据第8位将自己定为发送器或接收器</p>
<h1 id="I2C总线信号实现"><a href="#I2C总线信号实现" class="headerlink" title="I2C总线信号实现"></a>I2C总线信号实现</h1><p>I2C总线信号包括：起始信号、一字节信号、应答信号和停止信号</p>
<h2 id="起始信号和停止信号"><a href="#起始信号和停止信号" class="headerlink" title="起始信号和停止信号"></a>起始信号和停止信号</h2><p>SCL为高电平时，SDA由<strong>高变低</strong>表示<strong>起始信号</strong></p>
<p>SCL为高电平时，SDA由<strong>低变高</strong>表示<strong>停止信号</strong></p>
<p>起始信号和停止信号都是由主机发出，起始信号产生后总线处于占用状态，停止信号产生后总线处于空闲状态。</p>
<h2 id="字节传送与应答"><a href="#字节传送与应答" class="headerlink" title="字节传送与应答"></a>字节传送与应答</h2><p>I2C总线通信时每个字节为8位长度，数据传送时，<strong>先传送最高位</strong>，后传送低位，发送器发送完一个字节数据后接收器必须发送1位应答位来回应发送器即一帧共有9位。</p>
<h2 id="同步信号"><a href="#同步信号" class="headerlink" title="同步信号"></a>同步信号</h2><p>I2C如何区分发送数据是一个1还是两个1？</p>
<p>I2C总线在进行数据传送时，<strong>时钟线SCL</strong>为<strong>低电平</strong>期间<strong>发送器向数据线SDA上发送一位数据</strong>，在此期间数据线SDA上的信号允许发生变化，<strong>时钟线SCL</strong>为<strong>高电平</strong>期间<strong>接收器从数据线SDA上读取一位数据</strong>，在此期间数据线SDA上的信号不允许发生变化，必须保持稳定。</p>
<p>SCL这根线实际上是用来告诉发送器什么时候发数据，告诉接收器什么时候接收数据。低电平发数据，高电平接收数据。</p>
<h2 id="字节传送与应答-1"><a href="#字节传送与应答-1" class="headerlink" title="字节传送与应答"></a>字节传送与应答</h2><p>I2C总线通信时每个字节为8位长度，数据传送时，<strong>先传送最高位，后传送低位</strong>，发送器发送完一个字节数据后接收器必须<strong>发送1位应答位</strong>来回应发送器即一帧共9位。</p>
<h1 id="典型I2C时序"><a href="#典型I2C时序" class="headerlink" title="典型I2C时序"></a>典型I2C时序</h1><h2 id="主机向从机发送数据"><a href="#主机向从机发送数据" class="headerlink" title="主机向从机发送数据"></a>主机向从机发送数据</h2><p>主机发送一个起始信号——主机发送一个字节的从机地址数据——主机发送一个0表示数据由主机发给从机——被寻址的从机要发送一个应答信号——主机发送数据，从机接收数据——从机发送应答信号——……——当主机接收到应答信号后主机主动发送停止信号<strong>或者</strong>当主机没有接收到应答信号，就会发送停止信号</p>
<h2 id="从机向主机发送数据"><a href="#从机向主机发送数据" class="headerlink" title="从机向主机发送数据"></a>从机向主机发送数据</h2><p>主机发送一个起始信号——主机发送一个字节的从机地址数据——主机发送一个1表示数据由从机发给主机——被寻址的从机要发送一个应答信号——从机发送数据，主机接收数据——主机发送应答信号——……——主机不发送应答信号——主机发送停止信号</p>
<h2 id="主机先向从机发送数据，然后从机再向主机发送数据（这种情况不可能在一次I2C通信中实现）"><a href="#主机先向从机发送数据，然后从机再向主机发送数据（这种情况不可能在一次I2C通信中实现）" class="headerlink" title="主机先向从机发送数据，然后从机再向主机发送数据（这种情况不可能在一次I2C通信中实现）"></a>主机先向从机发送数据，然后从机再向主机发送数据（这种情况不可能在一次I2C通信中实现）</h2><p>主机发送一个起始信号——主机发送一个字节的从机地址数据——主机发送一个0表示数据由主机发给从机——被寻址的从机要发送一个应答信号——主机发送数据，从机接收数据——从机发送应答信号——……——从机不发送应答信号 / —— / 主机发送一个起始信号——主机发送一个字节的从机地址数据——主机发送一个1表示数据由从机发给主机——被寻址的从机要发送一个应答信号——从机发送数据，主机接收数据——主机发送应答信号——……——主机不发送应答信号——主机发送停止信号</p>
<p>注：中间不需要发送停止信号，就可以避免中间切换的过程中总线的使用权被其他从机占用。</p>
]]></content>
      <categories>
        <category>通信协议</category>
      </categories>
      <tags>
        <tag>通信协议</tag>
      </tags>
  </entry>
  <entry>
    <title>通信协议（2）mudbus</title>
    <url>/2023/03/28/Mudbus%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文将介绍RS232/RS485通信协议。</p>
<p>说明：学习嵌入式五大通信协议之一的RS232/RS485通信协议。</p>
<span id="more"></span>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p><strong>首先必须清楚一个概念RS232/RS485并不是协议只是一个接口，mudbus才是通信协议</strong></p>
<p><strong>Modbus协议支持传统的RS232、RS422、RS485接口和以太网设备接口</strong></p>
<h1 id="UART存在的问题"><a href="#UART存在的问题" class="headerlink" title="UART存在的问题"></a>UART存在的问题</h1><p>Mudbus协议是电气层（物理层）的协议，依赖于串口协议，只是在电气层进行了一些处理，能让它的抗干扰能力更强，传输距离更远。</p>
<p>一般做项目很少直接用串口直接进行通信的</p>
<p>原因（UART存在的问题）：</p>
<p><strong>电气接口不统一</strong></p>
<p>UART只是对信号的时序进行了定义，而未定义接口的电气特性；</p>
<p><strong>电气特性</strong>指网络物理层协议一个方面的特征。它规定传输二进制比特时线路上所采用的信号的电压高低、匹配阻抗大小、传输速率和距离限制等。</p>
<p>UART通信时一般直接使用处理器使用的电平，即TTL电平，但不同的处理器使用的电平存在差异，所以不同的处理器使用通信时一般不能直接相连。</p>
<p>例如：51单片机处理器高电平可能是5V，低电平是0V；stm32单片机处理器高电平可能是3.3V，低电平是0V。</p>
<p>注：单片机是一种集成电路芯片，把很多功能集成到一块硅片上构成的一个小而完善的计算机系统</p>
<p>视频上说：UART没有规定不同器件连接时连接器的标准，所以不同器件之间通过UART通信时连接很不方便。</p>
<p><strong>我认为这不能算缺点，正是因为没有统一标准所以可以自由搭配，反而增强了UART的兼容性。</strong></p>
<p><strong>抗干扰能力差</strong></p>
<p>UART一般直接使用TTL信号来表示0和1，但TTL信号的抗干扰能力较差，数据在传输过程中很容易出错。</p>
<p><strong>通信距离极短</strong></p>
<p>因为TTL信号的抗干扰能力较差，所以其通信距离也很短，一般只能用于一个电路板上的两个不同芯片之间的通信。</p>
<p>mudbus就由此诞生。</p>
<h1 id="RS232接口"><a href="#RS232接口" class="headerlink" title="RS232接口"></a>RS232接口</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>RS-232标准接口（又称EIA RS-232）是由美国电子工业协会(Electronic Industry Association，EIA)联合贝尔系统公司、调制解调器厂家及计算机终端生产厂家于1970年<strong>共同制定的用于串行通讯的标准</strong>，其全名是“数据终端设备( DTE)和数据通信设备(DCE)之间串行二进制数据交换接口技术标准”。</p>
<p>该标准规定<strong>采用一个标准的连接器</strong>，标准中<strong>对连接器的每一个引脚的作用加以规定</strong>，还<strong>对信号的电平加以规定</strong>。</p>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>该接口标准一开始采用25引脚的DB-25连接器，对引脚和信号也进行了定义；后来IBM的PC机将RS232简化成DB-9连接器，后来成为事实标准；现在在工业控制的RS-232接口一般只使用RXD、TXD、GND三条线。</p>
<p><strong>全双工</strong></p>
<h2 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h2><p>该标准规定逻辑“1”的电平为-5V到-15V，逻辑“0”的电平为+5V到+15V，选用该电气标准的目的在于提高抗干扰能力，增大通信距离，其传送距离一般可达15m。</p>
<p>电平高，范围大，所以抗干扰能力强。</p>
<h2 id="电平转换"><a href="#电平转换" class="headerlink" title="电平转换"></a>电平转换</h2><p>虽然很多处理器中都会集成UART控制器，但处理器产生的信号一般都是TTL信号并不符合RS232标准，所以一般需要在处理器外部添加电路对信号的电平进行转换。（添加外围电路，信号要经过其他芯片处理，例如MAX232EPE芯片，CH340芯片）</p>
<p><strong>RS232只是在电气层面进行了改进，所以RS232编程和UART一样</strong></p>
<h2 id="RS232存在的问题"><a href="#RS232存在的问题" class="headerlink" title="RS232存在的问题"></a>RS232存在的问题</h2><p>接口的信号电平值较高，易损坏接口电路的芯片，又因为与TTL电平不兼容，所以需要使用电平转换芯片才能与TTL电路连接。</p>
<p>通信速度慢。</p>
<p>易产生共模干扰，抗噪声干扰性弱。</p>
<p>（共模干扰指的是干扰电压在信号线及其回线（一般称为信号地线）上的幅度相同，这里的电压以附近任何一个物体（大地、金属机箱、参考地线板等）为参考电位，干扰电流回路则是在导线与参考物体构成的回路中流动。）</p>
<p>传输距离还是短。</p>
<h1 id="RS485接口"><a href="#RS485接口" class="headerlink" title="RS485接口"></a>RS485接口</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>该接口标准由电信行业协会和电子工业联盟定义；使用该标准的通信网络能在<strong>远距离</strong>条件下以及电子噪声大的环境下<strong>有效传输信号</strong>；该标准允许连接多个收发器，，即具有<strong>多站能力</strong>，这样可以利用单一的RS485接口方便地建立起一个<strong>设备网络</strong>。</p>
<p><strong>通信距离可达1500m</strong></p>
<p><strong>抗干扰能力增强</strong></p>
<p><strong>具有组网能力（32个站点）</strong></p>
<p>主机需要对从机进行管理保证总线上的收发通畅。</p>
<h2 id="信号-1"><a href="#信号-1" class="headerlink" title="信号"></a>信号</h2><p>RS485标准规定采用差分信号进行数据传输，两线间地电压差为+2V到+6V表示逻辑“1”，两线间地电压差为-2V到-6V表示逻辑“0”；使用<strong>差分信号</strong>能有效地减少噪声信号地干扰（有效降低共模干扰，因为差分信号两根线是互作参考，即使有干扰也是两根线共同被干扰，之间的电压差不变），延长通信距离，RS485地通信距离可达1500m；RS485接口信号地电平比RS232降低了，所以不易损坏接口电路地芯片，且<strong>该电平与TTL电平兼容</strong>，可方便地与TTL电路连接。</p>
<p>串口和RS232都是通过一根线对GND线地高和低来表示1和0。</p>
<p>差分信号：用两根线（双绞线）来描述一个信号，用两根线之间的差（有正负）的大小范围来描述1或0。</p>
<h2 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h2><p>RS485采用两线制，这种接线方式为总线式拓扑结构，在同一总线上可以存在多个节点；</p>
<p>因为采用两线制，数据的发送和接收都要使用这对差分信号线，<strong>发送和接收不能同时进行</strong>，所以只能采用<strong>半双工</strong>的工作方式，编程时也需要加以处理。</p>
<h2 id="电平转换-1"><a href="#电平转换-1" class="headerlink" title="电平转换"></a>电平转换</h2><p>虽然很多处理器中都会集成UART控制器，但处理器产生的信号一般都是TTL信号并不是符合RS485标准的信号，所有一般我们还需要在处理器外部去添加电路将TTL信号转换成差分信号。（也就是要通过另一个芯片把单片机出来的单根线的信号转换成差分信号）</p>
<h2 id="RS485的优势"><a href="#RS485的优势" class="headerlink" title="RS485的优势"></a>RS485的优势</h2><p>接口的信号电平值较低，不易损坏接口电路的芯片，且与TTL电平兼容，可以方便地与TTL电路连接。</p>
<p>通信速度快</p>
<p>抗噪声干扰能力强</p>
<p>传输距离较远（1500m）</p>
<p>可实现多节点组网</p>
]]></content>
      <categories>
        <category>通信协议</category>
      </categories>
      <tags>
        <tag>通信协议</tag>
      </tags>
  </entry>
  <entry>
    <title>通信协议（4）SPI</title>
    <url>/2023/04/06/SPI%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文将介绍SPI通信协议。</p>
<p>说明：学习嵌入式五大通信协议之一的SPI通信协议。</p>
<span id="more"></span>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>SPI是串行外设接口的缩写，SPI是一种高速的（跟I2C和UART相比）、全双工、同步的（共用一个时钟）串行通信总线；</p>
<p>SPI采用主从方式工作，一般有一个主设备和一个或多个从设备；</p>
<p>SPI需要至少4根线，分别是MISO（主设备输入从设备输出）、MOSI（主设备输出从设备输入）、SCLK（时钟）、CS（片选，用于寻址）；</p>
<p>SPI使用引脚较少且布线方便，所以越来越多的芯片集成了这种通信协议。</p>
<h1 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h1><p>当主设备要和某个从设备进行通信时，主设备需要先向对应从设备的片选线上发送使能信号（高电平或者低电平，根据从机而定）表示选中该从设备。</p>
<p>注：主设备有多个CS（CS1,CS2,…）连接不同的从设备。</p>
<p>如何判断一个芯片是高电平使能还是低电平使能？</p>
<p>一般电路图上是CS，表示高电平有效；是CS上面一杠，表示低电平有效。</p>
<h1 id="通信过程"><a href="#通信过程" class="headerlink" title="通信过程"></a>通信过程</h1><p>SPI总线在进行数据传送时，<strong>先传送高位，后传送低位</strong>；</p>
<p>数据线为高电平表示逻辑‘1’，低电平表示逻辑‘0’；</p>
<p>一个字节传送完成后<strong>无需应答</strong>即可开始下一个字节的传送，没有起始信号，没有结束信号，没有应答信号；</p>
<p>SPI总线采用同步方式工作，时钟线在上升沿或下降沿时发送器向数据线上发送数据，在紧接着的下降沿或上升沿时接收器从数据线上读取数据，完成一位数据传送，八个时钟周期即可完成一个字节数据的传送；</p>
<h1 id="极性和相位"><a href="#极性和相位" class="headerlink" title="极性和相位"></a>极性和相位</h1><p>SPI总线有四种不同的工作模式，取决于极性（CPOL）和相位（CPHL）这两个因素</p>
<p>CPOL表示SCLK空闲时的状态。CPOL=0，空闲时SCLK为低电平；CPOL=1，空闲时SCLK为高电平。</p>
<p>CPHA表示采样时刻。CPHA=0，每个周期的第一个时钟沿采样；CPHA=1，每个周期的第二个时钟沿采样。</p>
<p>对于一个特定的从设备来说，一般在出厂时就会将其设计为某种特定的工作模式（看芯片手册）；我们在使用该设备时就必须保证主设备的工作模式和该从设备保持一致，否则是无法进行通信的；所以一般我们需要对主设备的CPOL和CPHA进行配置；</p>
<h1 id="I2C和SPI的异同"><a href="#I2C和SPI的异同" class="headerlink" title="I2C和SPI的异同"></a>I2C和SPI的异同</h1><h2 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h2><p>均采用串行、同步的方式</p>
<p>均采用TTL电平，传输距离和应用场景类似</p>
<p>均采用主从方式工作</p>
<h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><p>I2C为半双工，SPI为全双工</p>
<p>I2C有应答机制，SPI无应答机制</p>
<p>I2C通过向总线广播从机地址来寻址，SPI通过向对于从机发送使能信号来寻址</p>
<p>I2C的时钟极性和时钟相位固定，SPI的时钟极性和时钟相位可调</p>
]]></content>
      <categories>
        <category>通信协议</category>
      </categories>
      <tags>
        <tag>通信协议</tag>
      </tags>
  </entry>
  <entry>
    <title>通信协议（1）UART</title>
    <url>/2023/03/28/UART%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文将介绍UART通信协议。</p>
<p>说明：学习嵌入式五大通信协议之一的UART通信协议。</p>
<span id="more"></span>
<h1 id="什么是UART通信协议"><a href="#什么是UART通信协议" class="headerlink" title="什么是UART通信协议"></a>什么是UART通信协议</h1><p>UART 通用异步收发器（Universal Asynchronous Receiver Transmitter），是一种通用的<strong>串行</strong>、<strong>异步</strong>通讯总线，有两条数据线，可实现<strong>全双工</strong>的发送和接收。</p>
<p>在嵌入式系统中常用于主机与辅助设备之间的通信。（在嵌入式领域中使用最多的通信协议）</p>
<h1 id="通信基础概念"><a href="#通信基础概念" class="headerlink" title="通信基础概念"></a>通信基础概念</h1><h2 id="并行和串行"><a href="#并行和串行" class="headerlink" title="并行和串行"></a>并行和串行</h2><p>总线的作用：在计算机不同传递数据或信息。</p>
<p>总线是<strong>导线</strong>，通过传递高低电平的信号来实现信息的传递。高电平代表1，低电平代表0。</p>
<p>并行通信：总线在传递数据的过程中可以通过<strong>多根数据线</strong>把一个数据的多个位<strong>一次性</strong>发送。</p>
<p>串行通信：总线在传递数据的过程中可以通过<strong>一根数据线</strong>把一个数据<strong>依次</strong>发送。</p>
<p>并行通信优点在于快速，缺点是线比较多可能布线有一定难度，线之间存在干扰，小数据量下比较浪费。</p>
<p>串行通讯优点在于稳定，缺点是速度慢，数据大了传输的时间长。</p>
<p>嵌入式中串行总线用的多。</p>
<h2 id="单工和双工"><a href="#单工和双工" class="headerlink" title="单工和双工"></a>单工和双工</h2><p>单工通信：有一方是发送器，另一方是接收器。通信时只能由发送器发送数据给接收器。单向的</p>
<p>双工通信：双方可以发送数据也可以接收数据，但其中半双工里不能双方同时发送数据，只能一方发送一方接收。</p>
<h2 id="波特率"><a href="#波特率" class="headerlink" title="波特率"></a>波特率</h2><p>波特率用于描述UART通信时的通信速度，其单位为bps（bit per second）即每秒钟传送的bit的数量。</p>
<h1 id="UART帧格式-UART发送数据的格式"><a href="#UART帧格式-UART发送数据的格式" class="headerlink" title="UART帧格式 - UART发送数据的格式"></a>UART帧格式 - UART发送数据的格式</h1><p>起始位占1位，数据位（要发送的数据，5-8位，先发低位，后发高位位），校验位占1位（可有可无），停止位占1/1.5或2位</p>
<p>当不发送数据时，规定数据线上的状态必须是高电平。</p>
<p>起始位的电平为低电平。</p>
<p>通常来说数据位发送8位（一个字节），但5-8位都可以。为什么不能发很多位是为了避免累计误差，由于双方时钟可能存在误差，会导致结果漏掉其中的一两位，发5-8位可以减小累计误差的影响，不至于影响一整个数据。</p>
<p>检验位为奇偶校验，统计数据中1的个数，如果是偶数就把校验位置为1，反之为0。</p>
<p>停止位的电平为高电平。</p>
<p>01和0011的波形是一样的，但是通过波特率能区分0和1的个数。所以双方的波特率必须一致，要事先约定好。</p>
<h1 id="UART硬件连接"><a href="#UART硬件连接" class="headerlink" title="UART硬件连接"></a>UART硬件连接</h1><p>TXD发送数据，RXD接收数据</p>
<h1 id="UART控制器"><a href="#UART控制器" class="headerlink" title="UART控制器"></a>UART控制器</h1><p>一般情况下处理器中都会集成UART控制器，使用UART进行通信的时候只需要对其内部的相关寄存器进行设置即可。</p>
<h2 id="引脚功能设置"><a href="#引脚功能设置" class="headerlink" title="引脚功能设置"></a>引脚功能设置</h2><p>设置引脚功能的实质是让引脚在芯片内部连接到某一个对应的控制器</p>
<p>串口控制器包含：</p>
<p>波特率产生器（Baud-rate generator）：控制串口发送数据或者接收数据的速度（需要时钟源来做精确控制，保证波特率的精准）</p>
<p>发送器（Transmitter）：控制发送数据</p>
<p>接收器（Receiver）：控制接收数据</p>
<p>控制单元（Control unit）：控制整个串口控制器的工作逻辑</p>
<p>主频是CPU的工作频率，串口控制器有自己的工作频率。</p>
<h2 id="工作逻辑"><a href="#工作逻辑" class="headerlink" title="工作逻辑"></a>工作逻辑</h2><p>发送器和接收器都包含一个队列（FIFO）和一个移位器，队列用来存放数据，移位器用来吧数据传出去。发送的数据首先写到发送的缓冲区（队列），再把要发送的数据包括起始位，校验位和停止位拷贝到移位器，移位器通过右移把数据一位一位的移动到发送的引脚并以电平信号发送出去。</p>
<p>CPU通过芯片内部总线读取接收队列中的数据；向发送队列写入数据；读写控制器，通过控制寄存器控制整个串口的控制逻辑</p>
<h1 id="UART寄存器"><a href="#UART寄存器" class="headerlink" title="UART寄存器"></a>UART寄存器</h1><p>不同的寄存器是在自己的基地址的基础上加上需实现功能的偏移量</p>
<p>单块开发板可以用回环模式（Loop-back Mode）查看是否串口是否设置正确，就是自己发送的数据，自己接收。</p>
<p>CPU和外围硬件的 <strong>交互模式</strong> 有三种轮询模式，中断模式，DMA模式。</p>
<p><strong>轮询模式</strong></p>
<p>数据从外面的芯片发过来，接收器接收了，CPU想要调用这个数据，CPU跑一段自己的程序就查看一下队列中有没有数据，没有就继续跑一段自己的程序再查看一下队列中有没有数据，直到队列中有数据，CPU读取数据。</p>
<p><strong>中断模式</strong></p>
<p>一旦队列接收到数据串口控制器就给CPU发送一个中断信号，此时CPU再去读数据</p>
<p><strong>DMA模式</strong></p>
<p>直接存储器访问。队列接收到数据后串口控制器直接访问存储器把数据放进去。</p>
<h1 id="程序思路"><a href="#程序思路" class="headerlink" title="程序思路"></a>程序思路</h1><p>1、定义接收引脚和发送引脚</p>
<p>要先把低八位清零再设置</p>
<p>2、设置帧格式</p>
<p>3、设置数据交互模式</p>
<p>4、设置波特率</p>
<p>5、设置循环将发送的数据写入发送寄存器中</p>
<p><strong>问：为什么只写发送程序电脑接收到的和发送的数据不一样？</strong></p>
<p>因为在没有限制的情况下CPU往寄存器中写数据的速度和寄存器往外发数据的速度是不一样的。</p>
<p>解决方法：判断发送器是否是空闲的，空闲了CPU再发。（芯片内部有只读寄存器能判断）</p>
<p><strong>题外话：</strong>在SecureCRT中看到的显示内容，其实是开发板返回的内容，看到显示的内容和输入的内容一致只是开发板返回了相同的内容。</p>
<h1 id="输入输出重定向"><a href="#输入输出重定向" class="headerlink" title="输入输出重定向"></a>输入输出重定向</h1><h2 id="如何让串口发送字符串"><a href="#如何让串口发送字符串" class="headerlink" title="如何让串口发送字符串"></a>如何让串口发送字符串</h2><p>首先需要把要发送字符串的首地址传到函数中，再通过发送函数把字符串的每一个字一个一个发出去。</p>
<p>举例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">void UART_Send_Str(char * pstr)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">while</span>(*pstr != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    UART_Send_Byte(*pstr++);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># pstr是字符串的首地址，*pstr是首地址对应的内容。</span></span><br></pre></td></tr></table></figure>
<h2 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h2><p>之前电脑安装了C库所以printf输出的内容通过显卡输出到显示屏上；在开发板没有安装C库之前在程序中自定义了printf函数，所以printf输出的内容通过开发板发送到UART上。</p>
<p>这就是输出重定向。<strong>主要用于系统移植</strong></p>
]]></content>
      <categories>
        <category>通信协议</category>
      </categories>
      <tags>
        <tag>通信协议</tag>
      </tags>
  </entry>
  <entry>
    <title>数据在内存中的存储</title>
    <url>/2023/03/28/%E6%95%B0%E6%8D%AE%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文将介绍数据在内存中的存储。</p>
<p>说明：了解数据在内存中如何存储，利于后面学习对数据的调用。</p>
<span id="more"></span>
<h1 id="整数数据类型在内存中的存储"><a href="#整数数据类型在内存中的存储" class="headerlink" title="整数数据类型在内存中的存储"></a>整数数据类型在内存中的存储</h1><h2 id="原码"><a href="#原码" class="headerlink" title="原码:"></a>原码:</h2><p>一组二进制数</p>
<h2 id="反码"><a href="#反码" class="headerlink" title="反码:"></a>反码:</h2><p>只要硬件电路中有加法器，计算机就能做减法。</p>
<p><strong>正数的反码和原码一样。</strong>(正数没有反码，或不需要反码，但为了定义上完整所以规定正数的反码和原码相同)</p>
<p><strong>负数的反码，除了符号位外，是对其原码逐位取反。</strong></p>
<p>注: 符号位存在于有符号数据类型中，无符号数据类型没有符号位。符号位指的是数据的最高位(也就是最左边的一位)。<strong>当符号位是1时，表示这个有符号数据类型是负数</strong>。</p>
<h2 id="补码"><a href="#补码" class="headerlink" title="补码:"></a>补码:</h2><p><strong>正数的补码和原码一样。</strong></p>
<p><strong>负数的补码是在其反码的的末位加1。</strong></p>
<p>例子: 假设a,b都为正数 a - b = a + b的补码 = a + ( b的反码 + 1 )</p>
<p>对于补码，有一种投机取巧的方式，即补码是在原码的基础上从最右边开始算，遇到第一个1后，后面的所有数（符号位除外）都取反，如源码：10101010的补码：11010110( 右边第一个1开始除符号位外，都取反 )。</p>
<p><strong>对于所有的数在计算机中，数值的存储都是以补码存储的</strong></p>
<p>所以如果是八位的话能表示的最小整数为 10000000(补码) = -1*2<sup>7</sup> = -128；能表示对最大整数为  01111111(原码/补码) = 2<sup>7</sup> - 1 = 127；</p>
<p><strong>注意: 这里的正数是从0到127，有128个数。负数时从-128到-1，有128个数。</strong></p>
<p>-127的补码 = 10000001: 原码: 11111111</p>
<p>10000000(补码) - 1 = 111111111(反码) 反码取反 = 10000000(原码)</p>
<p>所以10000000 = -0 (-0=0)，但是在计算机里面，由于是补码储存，所以规定-0就是-128。</p>
<p>注: 最小值-128的原码、反码、补码分别为10000000、11111111、10000000</p>
<h2 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h2><p>数据在内存中的存储方式并不是我们想象的那样，而是从右向左进行存储的。其实计算机中存储数据是有两种模式的，一种是 <strong>大端模式</strong> ，一种是 <strong>小端模式</strong> 。</p>
<p>十六进制是0x12 34 56 78，则78属于低位字节，12属于高位字节。</p>
<h3 id="大端模式"><a href="#大端模式" class="headerlink" title="大端模式"></a>大端模式</h3><p><strong>大端模式</strong>: Big-Endian就是<strong>高位字节排放在内存的低地址端</strong>，低位字节排放在内存的高地址端。</p>
<p>（其实大端模式才是我们直观上认为的模式，和字符串存储的模式相类似）地址由小向大增加，而数据从高位往低位放</p>
<p>低地址 ——————&gt; 高地址</p>
<p>0x12 | 0x34 | 0x56 | 0x78</p>
<h3 id="小端模式"><a href="#小端模式" class="headerlink" title="小端模式"></a>小端模式</h3><p><strong>小端模式</strong>: Little-Endian就是<strong>低位字节排放在内存的低地址端</strong>，高位字节排放在内存的高地址端。</p>
<p>低地址 ——————&gt; 高地址</p>
<p>0x78 | 0x56 | 0x34 | 0x12</p>
<h1 id="浮点数据类型在内存中的存储"><a href="#浮点数据类型在内存中的存储" class="headerlink" title="浮点数据类型在内存中的存储"></a>浮点数据类型在内存中的存储</h1><p>根据国际标准IEEE（电气和电子工程协会） 754，任意一个二进制浮点数V可以表示成下面的形式：</p>
<p><strong>(-1)^S <em> M </em> 2^E</strong> </p>
<p>(-1)^s表示符号位，当s=0，V为正数；当s=1，V为负数。</p>
<p>M表示有效数字，大于等于1，小于2。</p>
<p>2^E表示指数位。</p>
<p>以9.0为例,首先我们写出9的二进制是1001，然后再写出小数点右边的二进制，所以最后是1001.0，小数点后的二进制刚开始权重是 2<sup>−1</sup> , 然后 2<sup>−2</sup> 这样，例如 5.5 就是 5 的二进制是 101 ，然后小数点后是 1 ，因为 1<em>2<sup>−1</sup> = 0.5 。回到 1001.0 ，把 1001.0 写成科学计算法的形式，就是 1.001</em>2^3 ，最后化成标准就是 (-1)^0<em>1.001</em>2^3 ，此时 S = 0，M = 1.001，E = 3。</p>
<p>那S，M，E在内存中是怎么存储的？</p>
<p>IEEE 754规定：</p>
<p>对于32位的浮点数，最高的1位是符号位s，接着的8位是指数E，剩下的23位为有效数字M。</p>
<p>对于64位的浮点数，最高的1位是符号位S，接着的11位是指数E，剩下的52位为有效数字M。</p>
<p>IEEE 754对M和E有特别的规定，这里就暂时不说了，感兴趣可以自己去查下。</p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>机械臂笛卡尔空间规划</title>
    <url>/2023/09/01/%E6%9C%BA%E6%A2%B0%E8%87%82%E7%AC%9B%E5%8D%A1%E5%B0%94%E7%A9%BA%E9%97%B4%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文将介绍笛卡尔空间规划方法。</p>
<p>说明：失踪人口回归，这段时间一直在帮导师写机器人运动规划方面的东西，之前从来没有接触过这方面的知识，通过不断地查资料看论文对机器人运动规划有了一些浅薄的认知。想通过这篇博客记录下学习到的笛卡尔空间规划的知识。</p>
<span id="more"></span>
<h1 id="笛卡尔空间规划介绍"><a href="#笛卡尔空间规划介绍" class="headerlink" title="笛卡尔空间规划介绍"></a>笛卡尔空间规划介绍</h1><p>在机械臂的实际应用中，通常要求机械臂末端执行器沿着指定的路径（如直线、平面曲线或空间曲线等）进行运动，或者在多点之间进行移动。笛卡尔空间规划就是就是来规划机械臂末端执行器在工作空间运动的轨迹，这个轨迹不光规划了末端执行器所在空间中的位置信息还规划了末端执行器在空间中的姿态。</p>
<p>笛卡尔空间进行规划主要分为以下几步：</p>
<p><strong>第一步</strong>，确定末端执行器需要经过的关键点，关键点的确定最简单的可以通过对机械臂进行示教的方式实现；还可以通过一些避障算法实现，因为选关键点除去起始点和目标点，无非就是为了选取一些关键点让执行器避开障碍物。</p>
<p><strong>第二步</strong>，确定末端执行器在指定的若干关键点处的位姿（比如在进行从上方抓取物体并放置的任务时，当关键点只有起始点和目标点时，起始点和目标点机械臂末端执行器的Z轴需要垂直于物体），位姿确定后我们就得到了关键点在空间中的x，y，z轴坐标和末端执行器在此关键点的偏航角，俯仰角和翻滚角。</p>
<p><strong>第三步</strong>，当关键点处位姿确定后就需要确定关键点之间是如何连接的，也就是要对这些离散的点进行插值或者平滑处理来得到连续的笛卡尔空间轨迹。最简单也是最常用的是通过直线、圆弧或者直线加圆弧混合的方式依次对关键点进行连接，更高级的可以使用高阶多项式、样条曲线和参数化曲线（贝塞尔曲线和B样条曲线）等（这些曲线多用于关节空间规划中）。</p>
<p><strong>第四步</strong>，由于机械臂由多个关节组成即使得到了机械臂末端执行器的路径并不能直接进行控制，还需要把路径分成多个点，并把每个点进行运动学逆解得到对应的关节角度，这样就可以通过控制关节来实现对末端执行器的控制。所以到底要取多少个点需要自己定，点越多肯定和曲线越接近，但进行运动学逆解的运算量就越大（不是一般的大O.O）。</p>
<p>下面将介绍直线插值和圆弧插值，更高级的方法在笛卡尔空间的应用在这先挖个坑后面会补上哦。</p>
<h2 id="直线插值"><a href="#直线插值" class="headerlink" title="直线插值"></a>直线插值</h2><p>在机械臂笛卡尔空间规划中，直线插值是较为重要的插值方法。如图1所示，末端执行器将从点\(P\)直线运动到点\(Q\)，假设移动速度为\(v\)，位姿插补的时间间隔为\(T\)，点\(P\)的坐标为\(P\left[ \{\{x_0\},\{y_0\},\{z_0\}\} \right]\)，点\(Q\)的坐标为\(Q\left[ \{\{x_n\},\{y_n\},\{z_n\}\} \right]\)。</p>
<p><img src=".\picture\空间直线.jpg#centered" alt="空间直线"></p>
<p style="text-align:center;">图1 空间直线</p>

<p>点\(P\)到点\(Q\)的距离\(L\)如式（1）所示。</p>
<html>

<head>
  <title>距离\\(L\\)公式</title>
</head>

<body>
<table style="width:100%;border-collapse: collapse;">
  <tr style="border-top: none;text-align: center;">
    <td style="border: none;width: 20px;">&nbsp</td>
    <td style="border: none;width: 100px;">$$L = \sqrt \{\{\{(\{x_n\} - \{x_0\})\}^2\} + \{\{(\{y_n\} - \{y_0\})\}^2\} + \{\{(\{z_n\} - \{z_0\})\}^2\}\} $$</td>
    <td style="border: none;width: 20px;text-align: right;">式(1)</td>
  </tr>
</table>
</body>

</html>


<p>末端执行器单次时间间隔\(T\)内的行程\(d\)如式（2）所示。</p>
<html>

<head>
  <title>行程\\(d\\)公式</title>
</head>

<body>
<table style="width:100%;border-collapse: collapse;">
  <tr style="border-top: none;text-align: center;">
    <td style="border: none;width: 20px;">&nbsp</td>
    <td style="border: none;width: 100px;text-align: right;">$$d = vT$$</td>
    <td style="border: none;width: 20px;text-align: right;">式(2)</td>
  </tr>
</table>
</body>

</html>


<p>插值总次数\(N\)如式（3）所示。</p>
<html>

<head>
  <title>插值总次数\\(N\\)公式</title>
</head>

<body>
<table style="width:100%;border-collapse: collapse;">
  <tr style="border-top: none;">
    <td style="border: none;width: 20px;">&nbsp</td>
    <td style="border: none;width: 100px;">$$N = ceil\left( \{\frac\{L\}\{d\}\} \right)$$</td>
    <td style="border: none;width: 20px;text-align: right;">式(3)</td>
  </tr>
</table>
</body>

</html>


<p>其中，\(ceil()\)为向上取整函数。</p>
<p>注：这里我认为插值次数也可以自己定不一定要按公式来。</p>
<p>各坐标轴增量如式（4）所示。</p>
<html>

<head>
  <title>各坐标轴增量公式</title>
</head>

<body>
<table style="width:100%;border-collapse: collapse;">
  <tr style="border-top: none;">
    <td style="border: none;width: 20px;">&nbsp</td>
    <td style="border: none;width: 100px;">$$\left\{ \begin\{array\}\{l\}
\Delta x = \frac\{\{(\{x_n\} - \{x_0\})\}\}\{N\}\\
\Delta y = \frac\{\{(\{y_n\} - \{y_0\})\}\}\{N\}\\
\Delta z = \frac\{\{(\{z_n\} - \{z_0\})\}\}\{N\}
\end\{array\} \right.$$</td>
    <td style="border: none;width: 20px;text-align: right;">式(4)</td>
  </tr>
</table>
</body>

</html>


<p>\(T_i()\)时刻机械臂末端执行器在空间坐标系中的坐标值如式（5）所示。</p>
<html>

<head>
  <title>\\(T_i()\\)时刻机械臂末端执行器在空间坐标系中的坐标值公式</title>
</head>

<body>
<table style="width:100%;border-collapse: collapse;">
  <tr style="border-top: none;">
    <td style="border: none;width: 20px;">&nbsp</td>
    <td style="border: none;width: 100px;">$$\left\{ \begin\{array\}\{l\}
x = \{x_\{i - 1\}\} + i\Delta x\\
y = \{y_\{i - 1\}\} + i\Delta y\\
z = \{z_\{i - 1\}\} + i\Delta z
\end\{array\} \right.$$</td>
    <td style="border: none;width: 20px;text-align: right;">式(5)</td>
  </tr>
</table>
</body>

</html>


<h2 id="圆弧插值"><a href="#圆弧插值" class="headerlink" title="圆弧插值"></a>圆弧插值</h2><p>在空间中，通过不在同一直线上的三个点可确定一个圆及三点间的圆弧。假设机械臂笛卡尔空间中的三个节点分别是圆弧的起点\(P\left[ \{\{x_p\},\{y_p\},\{z_p\}\} \right]\)，圆弧的中间点\(Q\left[ \{\{x_q\},\{y_q\},\{z_q\}\} \right]\)，圆弧的终点\(R\left[ \{\{x_r\},\{y_r\},\{z_r\}\} \right]\)，圆弧的圆心\(C\left[ \{\{x_c\},\{y_c\},\{z_c\}\} \right]\)，圆弧的半径为\(r\)，如图2所示。</p>
<p><img src=".\picture\空间三点及相关参数.jpg#centered" alt="空间三点及相关参数"></p>
<p style="text-align:center;">图2 空间三点及相关参数</p>

<p>向量\(PQ\)和向量\(QR\)分别如式（6）和式（7）所示。</p>
<html>

<head>
  <title>向量\\(PQ\\)公式</title>
</head>

<body>
<table style="width:100%;border-collapse: collapse;">
  <tr style="border-top: none;">
    <td style="border: none;width: 20px;">&nbsp</td>
    <td style="border: none;width: 100px;">$$PQ = \{[\begin\{array\}\{*\{20\}\{c\}\}
\{\{x_q\} - \{x_p\}\}&\{\{y_q\} - \{y_p\}\}&\{\{z_q\} - \{z_p\}\}
\end\{array\}]^\{\rm\{T\}\}\}$$</td>
    <td style="border: none;width: 20px;text-align: right;">式(6)</td>
  </tr>
</table>
</body>

</html>


<html>

<head>
  <title>向量\\(QR\\)公式</title>
</head>

<body>
<table style="width:100%;border-collapse: collapse;">
  <tr style="border-top: none;">
    <td style="border: none;width: 20px;">&nbsp</td>
    <td style="border: none;width: 100px;">$$QR = \{[\begin\{array\}\{*\{20\}\{c\}\}
\{\{x_r\} - \{x_q\}\}&\{\{y_r\} - \{y_q\}\}&\{\{z_r\} - \{z_q\}\}
\end\{array\}]^\{\rm\{T\}\}\}$$</td>
    <td style="border: none;width: 20px;text-align: right;">式(7)</td>
  </tr>
</table>
</body>

</html>


<p>则\(P\)、\(Q\)、\(R\)三点所在平面\(I\)的法向量\(n\)如式（8）所示。</p>
<html>

<head>
  <title>法向量\\(n\\)公式</title>
</head>

<body>
<table style="width:100%;border-collapse: collapse;">
  <tr style="border-top: none;">
    <td style="border: none;width: 20px;">&nbsp</td>
    <td style="border: none;width: 100px;">\[n = \{\left[ \{\begin\{array\}\{*\{20\}\{c\}\}
\{\{n_x\}\}&\{\{n_y\}\}&\{\{n_z\}\}
\end\{array\}\} \right]^\{\rm\{T\}\}\} = PQ \times QR = \left| \{\begin\{array\}\{*\{20\}\{c\}\}
i&j&k\\
\{\{x_q\} - \{x_p\}\}&\{\{y_q\} - \{y_p\}\}&\{\{z_q\} - \{z_p\}\}\\
\{\{x_r\} - \{x_q\}\}&\{\{y_r\} - \{y_q\}\}&\{\{z_r\} - \{z_q\}\}
\end\{array\}\} \right|\]</td>
    <td style="border: none;width: 20px;text-align: right;">式(8)</td>
  </tr>
</table>
</body>

</html>


<p>由圆的性质可知，线段\(PQ\)的中垂线和线段\(QR\)的中垂线的交点即为圆弧的圆心。</p>
<p>同时垂直于向量\(n\)和向量\(PQ\)的向量即为线段\(PQ\)的中垂线的方向向量\(n_1\)，\(n_1\)如式（9）所示。</p>
<html>

<head>
  <title>方向向量\\(n_1\\)公式</title>
</head>

<body>
<table style="width:100%;border-collapse: collapse;">
  <tr style="border-top: none;">
    <td style="border: none;width: 20px;">&nbsp</td>
    <td style="border: none;width: 100px;">\[\{n_1\} = \{\left[ \{\begin\{array\}\{*\{20\}\{c\}\}
\{\{n_\{1x\}\}\}&\{\{n_\{1y\}\}\}&\{\{n_\{1z\}\}\}
\end\{array\}\} \right]^\{\rm\{T\}\}\} = n \times PQ = \left| \{\begin\{array\}\{*\{20\}\{c\}\}
i&j&k\\
\{\{n_x\}\}&\{\{n_y\}\}&\{\{n_z\}\}\\
\{\{x_q\} - \{x_p\}\}&\{\{y_q\} - \{y_p\}\}&\{\{z_q\} - \{z_p\}\}
\end\{array\}\} \right|\]</td>
    <td style="border: none;width: 20px;text-align: right;">式(9)</td>
  </tr>
</table>
</body>

</html>


<p>假设线段\(PQ\)的中点为\(A\left[ \{\{a_x\},\{a_y\},\{a_z\}\} \right]\)，由\(P\)点和\(Q\)点的坐标可得\(a_x\)、\(a_y\)、\(a_z\)的值如式（10）所示。</p>
<html>

<head>
  <title>点\\(A\\)坐标公式</title>
</head>

<body>
<table style="width:100%;border-collapse: collapse;">
  <tr style="border-top: none;">
    <td style="border: none;width: 20px;">&nbsp</td>
    <td style="border: none;width: 100px;">\[\{a_x\} = \frac\{\{\{x_q\} + \{x_p\}\}\}\{2\},\{a_y\} = \frac\{\{\{y_q\} + \{y_p\}\}\}\{2\},\{a_y\} = \frac\{\{\{z_q\} + \{z_p\}\}\}\{2\}\]</td>
    <td style="border: none;width: 20px;text-align: right;">式(10)</td>
  </tr>
</table>
</body>

</html>


<p>线段\(PQ\)的中垂线所在直线的方程\(L_1\)如式（11）所示。</p>
<html>

<head>
  <title>直线\\(L_1\\)方程</title>
</head>

<body>
<table style="width:100%;border-collapse: collapse;">
  <tr style="border-top: none;">
    <td style="border: none;width: 20px;">&nbsp</td>
    <td style="border: none;width: 100px;">\[\frac\{\{x - \{a_x\}\}\}\{\{\{n_\{1x\}\}\}\} = \frac\{\{y - \{a_y\}\}\}\{\{\{n_\{1y\}\}\}\} = \frac\{\{z - \{a_z\}\}\}\{\{\{n_\{1z\}\}\}\}\]</td>
    <td style="border: none;width: 20px;text-align: right;">式(11)</td>
  </tr>
</table>
</body>

</html>


<p>同时垂直于向量\(n\)和向量\(QR\)的向量即为线段\(QR\)的中垂线的方向向量\(n_2\)，\(n_2\)如式（12）所示。</p>
<html>

<head>
  <title>方向向量\\(n_2\\)公式</title>
</head>

<body>
<table style="width:100%;border-collapse: collapse;">
  <tr style="border-top: none;">
    <td style="border: none;width: 20px;">&nbsp</td>
    <td style="border: none;width: 100px;">\[\{n_2\} = \{\left[ \{\begin\{array\}\{*\{20\}\{c\}\}
\{\{n_\{2x\}\}\}&\{\{n_\{2y\}\}\}&\{\{n_\{2z\}\}\}
\end\{array\}\} \right]^\{\rm\{T\}\}\} = n \times PQ = \left| \{\begin\{array\}\{*\{20\}\{c\}\}
i&j&k\\
\{\{n_x\}\}&\{\{n_y\}\}&\{\{n_z\}\}\\
\{\{x_r\} - \{x_q\}\}&\{\{y_r\} - \{y_q\}\}&\{\{z_r\} - \{z_q\}\}
\end\{array\}\} \right|\]</td>
    <td style="border: none;width: 20px;text-align: right;">式(12)</td>
  </tr>
</table>
</body>

</html>


<p>假设线段\(QR\)的中点为\(B\left[ \{\{b_x\},\{b_y\},\{b_z\}\} \right]\)，由\(Q\)点和\(R\)点的坐标可得\(b_x\)、\(b_y\)、\(b_z\)的值如式（13）所示。</p>
<html>

<head>
  <title>点\\(B\\)坐标公式</title>
</head>

<body>
<table style="width:100%;border-collapse: collapse;">
  <tr style="border-top: none;">
    <td style="border: none;width: 20px;">&nbsp</td>
    <td style="border: none;width: 100px;">\[\{b_x\} = \frac\{\{\{x_r\} + \{x_q\}\}\}\{2\},\{b_y\} = \frac\{\{\{y_r\} + \{y_q\}\}\}\{2\},\{b_y\} = \frac\{\{\{z_r\} + \{z_q\}\}\}\{2\}\]</td>
    <td style="border: none;width: 20px;text-align: right;">式(13)</td>
  </tr>
</table>
</body>

</html>


<p>线段\(QR\)的中垂线所在直线的方程\(L_2\)如式（14）所示。</p>
<html>

<head>
  <title>直线\\(L_2\\)方程</title>
</head>

<body>
<table style="width:100%;border-collapse: collapse;">
  <tr style="border-top: none;">
    <td style="border: none;width: 20px;">&nbsp</td>
    <td style="border: none;width: 100px;">\[\frac\{\{x - \{b_x\}\}\}\{\{\{n_\{2x\}\}\}\} = \frac\{\{y - \{b_y\}\}\}\{\{\{n_\{2y\}\}\}\} = \frac\{\{z - \{b_z\}\}\}\{\{\{n_\{2z\}\}\}\}\]</td>
    <td style="border: none;width: 20px;text-align: right;">式(14)</td>
  </tr>
</table>
</body>

</html>


<p>由圆的性质可知，直线\(L_1\)和\(L_2\)的交点即为圆弧轨迹的圆心。可以采用线性方程组解法，将直线方程\(L_1\)和\(L_2\)转化成空间直线的一般式，由于方程组个数大于未知量个数，故利用广义逆来求\(L_1\)和\(L_2\)的交点，即圆弧的圆心坐标如式（15）所示。</p>
<html>

<head>
  <title>圆弧圆心\\(C\\)坐标</title>
</head>

<body>
<table style="width:100%;border-collapse: collapse;">
  <tr style="border-top: none;">
    <td style="border: none;width: 20px;">&nbsp</td>
    <td style="border: none;width: 100px;">\[\left[ \{\begin\{array\}\{*\{20\}\{c\}\}
\{\{x_c\}\}\\
\{\{y_c\}\}\\
\{\{z_c\}\}
\end\{array\}\} \right] = \{\left[ \{\begin\{array\}\{*\{20\}\{c\}\}
\{\{\rm\{ \}\}\{n_\{1y\}\}\{\rm\{\ \ \ \}\}\{n_\{1x\}\}\{\rm\{\ \ \ \}\}0\{\rm\{\ \ \}\}\}\\
\{\{\rm\{\ \}\}0\{\rm\{\ \ \ \}\}\{n_\{1z\}\}\{\rm\{\ \ \ \}\}\{n_\{1y\}\}\}\\
\{\{n_\{2y\}\}\{\rm\{\ \ \ \}\}\{n_\{2x\}\}\{\rm\{\ \ \ \}\}0\{\rm\{\ \ \}\}\}\\
\{\{\rm\{\ \}\}0\{\rm\{\ \ \ \ \}\}\{n_\{2z\}\}\{\rm\{\ \ \ \}\}\{n_\{2y\}\}\}
\end\{array\}\} \right]^ + \} \cdot \left[ \{\begin\{array\}\{*\{20\}\{c\}\}
\{\{a_x\}\{n_\{1y\}\} - \{n_\{1x\}\}\{a_y\}\}\\
\{\{a_y\}\{n_\{1z\}\} - \{a_z\}\{n_\{1y\}\}\}\\
\{\{b_x\}\{n_\{2y\}\} - \{n_\{2x\}\}\{b_y\}\}\\
\{\{b_y\}\{n_\{2z\}\} - \{b_z\}\{n_\{2y\}\}\}
\end\{array\}\} \right]\]</td>
    <td style="border: none;width: 20px;text-align: right;">式(15)</td>
  </tr>
</table>
</body>

</html>


<p>求得了圆弧的圆心坐标\(\left[ \{\{x_c\},\{y_c\},\{z_c\}\} \right]\)，则\(CP\)、\(CQ\)、\(CR\)三个向量的模都等于圆弧的半径\(r\)，如式（16）所示。</p>
<html>

<head>
  <title>圆弧半径\\(r\\)公式</title>
</head>

<body>
<table style="width:100%;border-collapse: collapse;">
  <tr style="border-top: none;">
    <td style="border: none;width: 20px;">&nbsp</td>
    <td style="border: none;width: 100px;">\[r = \left| \{CP\} \right| = \left| \{CQ\} \right| = \left| \{CR\} \right|\]</td>
    <td style="border: none;width: 20px;text-align: right;">式(16)</td>
  </tr>
</table>
</body>

</html>


<p>将空间圆弧转换为平面圆弧。如图3所示，建立坐标系\{\(O’\)\(X’\)\(Y’\)\(Z’\)\}，使原点\(O’\)位于圆心\(C\)处，以向量\(CP\)所在直线为\(X’\)轴，方向与向量\(CP\)相同，过点\(C\)且垂直于平面\(I\)的直线为\(Z’\)轴，\(Y’\)轴由右手定则确定，且平面\(X’\)\(O’\)\(Y’\)与平面\(I\)重合。</p>
<p><img src=".\picture\平面坐标系定义.jpg#centered" alt="平面坐标系定义"></p>
<p>假设\(X’\)轴上的单位向量为\(i’\)，它在坐标系\{\(O\)\(X\)\(Y\)\(Z\)\}中如式（17）所示。</p>
<html>

<head>
  <title>单位向量\\(i’\\)公式</title>
</head>

<body>
<table style="width:100%;border-collapse: collapse;">
  <tr style="border-top: none;">
    <td style="border: none;width: 20px;">&nbsp</td>
    <td style="border: none;width: 100px;">\[i' = \{\left[ \{\begin\{array\}\{*\{20\}\{c\}\}
\{\frac\{\{\{x_p\} - \{x_c\}\}\}\{\{\left| \{CP\} \right|\}\}\}&\{\frac\{\{\{y_p\} - \{y_c\}\}\}\{\{\left| \{CP\} \right|\}\}\}&\{\frac\{\{\{z_p\} - \{z_c\}\}\}\{\{\left| \{CP\} \right|\}\}\}
\end\{array\}\} \right]^\{\rm\{T\}\}\}\]</td>
    <td style="border: none;width: 20px;text-align: right;">式(17)</td>
  </tr>
</table>
</body>

</html>


<p>假设\(Z’\)轴上的单位向量为\(k’\)，它在坐标系\{\(O\)\(X\)\(Y\)\(Z\)\}中如式（18）所示。</p>
<html>

<head>
  <title>单位向量\\(k’\\)公式</title>
</head>

<body>
<table style="width:100%;border-collapse: collapse;">
  <tr style="border-top: none;">
    <td style="border: none;width: 20px;">&nbsp</td>
    <td style="border: none;width: 100px;">\[k' = \frac\{n\}\{\{\left| n \right|\}\} = \{\left[ \{\begin\{array\}\{*\{20\}\{c\}\}
\{\frac\{\{\{n_x\}\}\}\{\{\left| n \right|\}\}\}&\{\frac\{\{\{n_y\}\}\}\{\{\left| n \right|\}\}\}&\{\frac\{\{\{n_z\}\}\}\{\{\left| n \right|\}\}\}
\end\{array\}\} \right]^\{\rm\{T\}\}\}\]</td>
    <td style="border: none;width: 20px;text-align: right;">式(18)</td>
  </tr>
</table>
</body>

</html>


<p>假设\(Y’\)轴上的单位向量为\(j’\)，它在坐标系\{\(O\)\(X\)\(Y\)\(Z\)\}中如式（19）所示。</p>
<html>

<head>
  <title>单位向量\\(j’\\)公式</title>
</head>

<body>
<table style="width:100%;border-collapse: collapse;">
  <tr style="border-top: none;">
    <td style="border: none;width: 20px;">&nbsp</td>
    <td style="border: none;width: 100px;">\[\begin\{array\}\{l\}
j' = k' \times i'\\
\{\rm\{\ \ \}\} = \{\left[ \{\begin\{array\}\{*\{20\}\{c\}\}
\{\frac\{\{\{y_p\} - \{y_c\}\}\}\{\{\left| \{CP\} \right|\}\} \cdot \frac\{\{\{n_x\}\}\}\{\{\left| n \right|\}\} - \frac\{\{\{z_p\} - \{z_c\}\}\}\{\{\left| \{CP\} \right|\}\} \cdot \frac\{\{\{n_y\}\}\}\{\{\left| n \right|\}\}\}&\{\frac\{\{\{z_p\} - \{z_c\}\}\}\{\{\left| \{CP\} \right|\}\} \cdot \frac\{\{\{n_x\}\}\}\{\{\left| n \right|\}\} - \frac\{\{\{x_p\} - \{x_c\}\}\}\{\{\left| \{CP\} \right|\}\} \cdot \frac\{\{\{n_z\}\}\}\{\{\left| n \right|\}\}\}&\{\frac\{\{\{x_p\} - \{x_c\}\}\}\{\{\left| \{CP\} \right|\}\} \cdot \frac\{\{\{n_y\}\}\}\{\{\left| n \right|\}\} - \frac\{\{\{y_p\} - \{y_c\}\}\}\{\{\left| \{CP\} \right|\}\} \cdot \frac\{\{\{n_x\}\}\}\{\{\left| n \right|\}\}\}
\end\{array\}\} \right]^\{\rm\{T\}\}\}
\end\{array\}\]</td>
    <td style="border: none;width: 20px;text-align: right;">式(19)</td>
  </tr>
</table>
</body>

</html>


<p>则坐标系\{\(O’\)\(X’\)\(Y’\)\(Z’\)\}到坐标系\{\(O\)\(X\)\(Y\)\(Z\)\}之间的转换矩阵\(\{\}_o^\{o’\}T\)如式（20）所示。</p>
<html>

<head>
  <title>转换矩阵\\(\{\}_o^\{o'\}T\\)公式</title>
</head>

<body>
<table style="width:100%;border-collapse: collapse;">
  <tr style="border-top: none;">
    <td style="border: none;width: 20px;">&nbsp</td>
    <td style="border: none;width: 100px;">\[\{\}_o^\{o'\}T = \left[ \{\begin\{array\}\{*\{20\}\{c\}\}
\{\frac\{\{\{x_p\} - \{x_c\}\}\}\{\{\left| \{CP\} \right|\}\}\}&\{\frac\{\{\{y_p\} - \{y_c\}\}\}\{\{\left| \{CP\} \right|\}\} \cdot \frac\{\{\{n_z\}\}\}\{\{\left| n \right|\}\} - \frac\{\{\{z_p\} - \{z_c\}\}\}\{\{\left| \{CP\} \right|\}\} \cdot \frac\{\{\{n_y\}\}\}\{\{\left| n \right|\}\}\}&\{\frac\{\{\{n_x\}\}\}\{\{\left| n \right|\}\}\}&\{\{x_c\}\}\\
\{\frac\{\{\{y_p\} - \{y_c\}\}\}\{\{\left| \{CP\} \right|\}\}\}&\{\frac\{\{\{z_p\} - \{z_c\}\}\}\{\{\left| \{CP\} \right|\}\} \cdot \frac\{\{\{n_x\}\}\}\{\{\left| n \right|\}\} - \frac\{\{\{x_p\} - \{x_c\}\}\}\{\{\left| \{CP\} \right|\}\} \cdot \frac\{\{\{n_z\}\}\}\{\{\left| n \right|\}\}\}&\{\frac\{\{\{n_y\}\}\}\{\{\left| n \right|\}\}\}&\{\{y_c\}\}\\
\{\frac\{\{\{z_p\} - \{z_c\}\}\}\{\{\left| \{CP\} \right|\}\}\}&\{\frac\{\{\{x_p\} - \{x_c\}\}\}\{\{\left| \{CP\} \right|\}\} \cdot \frac\{\{\{n_y\}\}\}\{\{\left| n \right|\}\} - \frac\{\{\{y_p\} - \{y_c\}\}\}\{\{\left| \{CP\} \right|\}\} \cdot \frac\{\{\{n_x\}\}\}\{\{\left| n \right|\}\}\}&\{\frac\{\{\{n_z\}\}\}\{\{\left| n \right|\}\}\}&\{\{z_c\}\}\\
0&0&0&1
\end\{array\}\} \right]\]</td>
    <td style="border: none;width: 20px;text-align: right;">式(20)</td>
  </tr>
</table>
</body>

</html>


<p>则坐标系\{\(O’\)\(X’\)\(Y’\)\(Z’\)\}中任意点的坐标(\(x’\),\(y’\),\(z’\))，则它在坐标系\{\(O\)\(X\)\(Y\)\(Z\)\}中对应点(\(x\),\(y\),\(z\))如式（21）所示。</p>
<html>

<head>
  <title>两坐标系点的对应公式</title>
</head>

<body>
<table style="width:100%;border-collapse: collapse;">
  <tr style="border-top: none;">
    <td style="border: none;width: 20px;">&nbsp</td>
    <td style="border: none;width: 100px;">\[\left[ \{\begin\{array\}\{*\{20\}\{c\}\}
\{x'\}\\
\{y'\}\\
\{z'\}\\
1
\end\{array\}\} \right] = \{\}_o^\{o'\}\{T^\{ - 1\}\}\left[ \{\begin\{array\}\{*\{20\}\{c\}\}
x\\
y\\
z\\
1
\end\{array\}\} \right]\]</td>
    <td style="border: none;width: 20px;text-align: right;">式(21)</td>
  </tr>
</table>
</body>

</html>


<p>利用上式就能得到\(P\)、\(Q\)、\(R\)、\(C\)四个点在坐标系\{\(O’\)\(X’\)\(Y’\)\(Z’\)\}中对应点的坐标。</p>
<p>得到坐标后就可以进行圆弧插补轨迹的规划，首先在平面坐标系\{\(O’\)\(X’\)\(Y’\)\(Z’\)\}中，计算圆弧\(PQR\)的圆心角\(θ\)和插值次数\(N\)。如图3所示，圆心角\(θ\)可能有两种情况：\(θ≤π\)和\(θ&gt;π\)。这里，利用向量\(O’P\)和\(PR\)的法向量\(n_3\)与平面\(X’O’Y’\)的法向量\(n\)的内积来判断\(θ\)的值,如式（22）所示。</p>
<html>

<head>
  <title>内积\\(H\\)公式</title>
</head>

<body>
<table style="width:100%;border-collapse: collapse;">
  <tr style="border-top: none;">
    <td style="border: none;width: 20px;">&nbsp</td>
    <td style="border: none;width: 100px;">\[H = \{n_3\} \cdot n = O'P \times PR \cdot n\]</td>
    <td style="border: none;width: 20px;text-align: right;">式(22)</td>
  </tr>
</table>
</body>

</html>


<p>若\(H≥0\)，则\(θ≤π\)，\(\theta  = 2\arcsin \left( \{\frac\{\{\left| \{PR\} \right|\}\}\{\{2r\}\}\} \right)\);若\(H<0\\)，则\\(θ>π\)，\(\theta  = 2\pi  - 2\arcsin \left( \{\frac\{\{\left| \{PR\} \right|\}\}\{\{2r\}\}\} \right)\)。</p>
<p>假设机械臂的插补周期为\(t\)，移动速度为\(v\)，则机械臂末端执行器从当前点切向移动到下一个插补点的距离如式（23）所示。</p>
<html>

<head>
  <title>间距公式</title>
</head>

<body>
<table style="width:100%;border-collapse: collapse;">
  <tr style="border-top: none;">
    <td style="border: none;width: 20px;">&nbsp</td>
    <td style="border: none;width: 100px;">\[\Delta s = vt\]</td>
    <td style="border: none;width: 20px;text-align: right;">式(23)</td>
  </tr>
</table>
</body>

</html>


<p>步距角\(δ\)可如式（24）所示。</p>
<html>

<head>
  <title>步距角\\(δ\\)公式</title>
</head>

<body>
<table style="width:100%;border-collapse: collapse;">
  <tr style="border-top: none;">
    <td style="border: none;width: 20px;">&nbsp</td>
    <td style="border: none;width: 100px;">\[\delta  = \arcsin \left( \{\frac\{\{vt\}\}\{r\}\} \right)\]</td>
    <td style="border: none;width: 20px;text-align: right;">式(24)</td>
  </tr>
</table>
</body>

</html>


<p>插值总次数\(N\)如式（25）所示。</p>
<html>

<head>
  <title>插值总次数\\(N\\)公式</title>
</head>

<body>
<table style="width:100%;border-collapse: collapse;">
  <tr style="border-top: none;">
    <td style="border: none;width: 20px;">&nbsp</td>
    <td style="border: none;width: 100px;">$$N = ceil\left( \{\frac\{\theta \}\{\delta \}\} \right)$$</td>
    <td style="border: none;width: 20px;text-align: right;">式(25)</td>
  </tr>
</table>
</body>

</html>


<p>其中，\(ceil()\)为向上取整函数。</p>
<p>然后，在坐标系\{\(O’\)\(X’\)\(Y’\)\(Z’\)\}中，从\(P\)点开始，依次计算出圆弧轨迹上每个插补点的位置坐标(\(x’\),\(y’\),\(z’\))，再利用坐标变换矩阵\(\{\}_o^\{o’\}T\)求得该点在机械臂参考坐标系\{\(O\)\(X\)\(Y\)\(Z\)\}中的坐标(\(x\),\(y\),\(z\))，这样就完成了机械臂圆弧插补轨迹的规划。</p>
<p>既然有了直线和圆弧的插值方法，那将直线插值方法和圆弧插值方式进行组合使用也就很好实现啦。（这里先偷个懒，可能等后面有时间再补上吧）</p>
<p>当然了还有其他的一些高级方法哦。（这里也先偷个懒，主要还是这些方法有些细节我还没弄明白先弄明白再来写）</p>
<h2 id="姿态控制"><a href="#姿态控制" class="headerlink" title="姿态控制"></a>姿态控制</h2><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>到此为止我们通过前面的方法得到了大量离散的路径点，后面还需要根据机械臂逆解得到每个点所对应的机械臂每个关节的关节角度，也就是转化为机械臂的关节角度序列，到这里实际上我们已经完成了笛卡尔空间规划。<strong>但是要注意一点哦</strong>，即使取的点够密集那也是离散的点（比如相邻两点，第一个关节角度分别为30°和30.001°，即使它们相差很小，但他们的关节角度不是连续的），关节角度不可能直接发生瞬间变化所以那就还需要在关节空间对其关节角度进行规划给它一个变化的过渡过程，这就是关节空间规划的任务啦。</p>
<p>注：<br>（1）其实一开始我一直以为笛卡尔空间规划就只是规划出一条在空间中的路径，其实并不是这样的，因为在这段路径中其实还包括机械臂姿态的问题，也就是机械臂在笛卡尔空间进行轨迹规划的过程需要对末端执行器位置和姿态都进行规划。<br>（2）</p>
<style>
    img[src*='centered'] \{
        margin:auto;
        display:block;
    \}
</style>
]]></content>
      <categories>
        <category>运动规划</category>
      </categories>
      <tags>
        <tag>运动规划</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派初始化</title>
    <url>/2023/03/17/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文将介绍如何在树莓派上安装系统。</p>
<p>说明：这是一篇之前写过的文章，最近搭建了个人博客顺便搬过来。</p>
<span id="more"></span>
<h1 id="树莓派环境搭建"><a href="#树莓派环境搭建" class="headerlink" title="树莓派环境搭建"></a>树莓派环境搭建</h1><h2 id="下载树莓派官方系统"><a href="#下载树莓派官方系统" class="headerlink" title="下载树莓派官方系统"></a>下载树莓派官方系统</h2><p>官方地址：<a href="https://www.raspberrypi.org/software/operating-systems/">https://www.raspberrypi.org/software/operating-systems/</a></p>
<p>选择自己需要的系统（支持pc，mac，pi），这里我选择的是 <strong>Raspberry Pi OS with desktop</strong> 这个带桌面的。直接点击 <strong>Archive</strong> 进入后，再点击进入 <strong>最新的日期</strong> 的文件夹，最后选择 <strong>.img.xz</strong> 结尾的文件（size最大的）下载。<br>注：.xz是压缩方式的一种</p>
<p>由于这个是国外的网站下载速度可能会比较慢，要是太慢可以选择国内的镜像源： </p>
<ol>
<li>TUNA 镜像站（位于北京）：<a href="https://mirrors.tuna.tsinghua.edu.cn/raspberry-pi-os-images/">https://mirrors.tuna.tsinghua.edu.cn/raspberry-pi-os-images/</a></li>
<li>SJTUG 镜像站（位于上海）：<a href="https://mirrors.sjtug.sjtu.edu.cn/raspberry-pi-os-images/">https://mirrors.sjtug.sjtu.edu.cn/raspberry-pi-os-images/</a></li>
</ol>
<p>找到raspbian。</p>
<ol>
<li>raspbian/ 对应官网上的 Raspberry Pi OS with desktop 是带桌面的树莓派系统</li>
<li>raspbian_full/ 对应官网上的 Raspberry Pi OS with desktop and recommended software 是带桌面和推荐软件的树莓派操作系统</li>
<li>raspbian_lite/ 对应官网上的 Raspberry Pi OS Lite 是精简版的树莓派系统</li>
</ol>
<h2 id="安装树莓派官方系统"><a href="#安装树莓派官方系统" class="headerlink" title="安装树莓派官方系统"></a>安装树莓派官方系统</h2><p>当下载好系统后我们就需要把系统安装到SD卡中。</p>
<p>第一步要将我们的SD卡格式化(主要确保SD卡里没东西，防止出错)。可以使用<a href="https://www.sdcard.org/">SD Card Formatter</a>(由于是国外网址可能会比较卡，百度下载也是一样的)或者电脑的格式化工具(我的电脑—右键—管理—磁盘管理)<br><strong>注：看清楚再格式化，别弄错盘了！！！</strong></p>
<p>第二步将下载好的系统镜像文件烧录进SD卡中。可以使用<a href="https://sourceforge.net/projects/win32diskimager/">Win32DiskImager</a>软件进行烧录。<br><strong>步骤：</strong> 打开Win32DiskImager软件，在映像文件那放入解压后的 <strong>.img</strong> 镜像文件，选择SD卡所在的磁盘，点击 <strong>写入</strong> 耐心等待即可。</p>
<h2 id="树莓派系统设置"><a href="#树莓派系统设置" class="headerlink" title="树莓派系统设置"></a>树莓派系统设置</h2><p>既然已经安装好了系统，之后只要稍加设置就可以愉快使用了。</p>
<p>如果现在手头正好有屏幕并且树莓派的mini HDMI线也有的话，可以直接将SD卡插入树莓派并连接上屏幕在屏幕上进行操作。</p>
<p>如果是没有屏幕的话，可以采用ssh进行连接。</p>
<p><strong>下面是讲解没有屏幕时的方法。</strong><br>第一步在SD卡上写入两个文件(烧录完成后SD卡上会出现的boot分区，如果没有，拔下读卡器重插一下)。</p>
<ol>
<li>第一个文件是一个名字为<strong>ssh</strong>的空白文件(即新建文本文档，将文件名改为ssh，<strong>千万注意没有后缀哦</strong>)</li>
<li>第二个文件是一个名字为<strong>wpa_supplicant.conf</strong>的文件(用写字板打开后，要在文件中写入一下内容)<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">country=CN</span><br><span class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class="line">update_config=1</span><br><span class="line"></span><br><span class="line">network=&#123;</span><br><span class="line">    ssid=<span class="string">&quot;想要连接的WiFi名称&quot;</span></span><br><span class="line">    psk=<span class="string">&quot;想要连接的WiFi密码&quot;</span></span><br><span class="line">    key_mgmt=WPA-PSK //WiFi的加密方式(应该可以不写)</span><br><span class="line">    priority=1 //连接优先级，数字越大优先级越高(不可以是负数)</span><br><span class="line">    scan_ssid=1 //连接隐藏WiFi时需要指定该值为1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>第二步这两个文件设置完毕后将SD卡插到树莓派上就可以了。没有问题的话，在路由器管理或者手机热点里可以看到连接了一个raspberrypi的设备，需要查看它连接的 <strong>IP地址</strong> 之后ssh连接会用到。</p>
<p>第三步需要远程连接树莓派对其进行控制，可以使用<a href="https://www.putty.be/">PuTTy</a>进行ssh连接<br><strong>步骤：</strong> 进入PuTTY 在Host Name(or IP address)下方的方框中输入刚看到的IP地址 点击下方的Open</p>
<p>（若弹出任何窗口都不用管，选YES）在弹出的黑色窗口第一行输入当前设备名（第一次输入默认的是pi）pi, 回车 ，在第二行输入当前设备密码(第一次输入默认的是raspberry)raspberry(发现输入没有反应是正常的树莓派默认不会显示密码，我认为这个不好，后面可能会找找办法修改)，回车。这样就已经进入了设备。首次登陆会让你设置一个新密码，直接输入即可。</p>
<p>树莓派官方系统默认：<br><strong>用户名：pi</strong><br><strong>密码：raspberry</strong></p>
<p>ubunt系统默认：<br><strong>密码：ubuntu</strong></p>
<p>以上步骤完成后其实已经能对树莓派进行控制了。如果想远程连接到树莓派桌面请往下看，不需要的可以跳过。</p>
<p>第四步远程连接树莓派桌面，可以使用<a href="https://www.realvnc.com/en/connect/download/viewer/">VNC Viewer</a>,下载完成后回到 <strong>Putty</strong> 输入<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo raspi-config</span><br></pre></td></tr></table></figure></p>
<p>接下来按顺序选择Interfacing Options—&gt;回车—&gt;VNC—&gt;回车—&gt;yes—&gt;回车—&gt;y—&gt;回车 (若选错想回退，按向下方向键到最下面按Tab切换)</p>
<p>此时直接开启VNC若不显示屏幕则是分辨率的问题<br>再次使用 <strong>PuTTy</strong> 进入pi<br>输入<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo raspi-config</span><br></pre></td></tr></table></figure><br>接下来按照顺序选择Advanced Options—&gt;Resolution—&gt;选择合适的分辨率</p>
<p><strong>查的时候发现改完分辨率后再启动可能还会有点问题，这里暂时不写了，后面可能会更新。</strong></p>
<p>第五步按照pi的提示初始化系统。</p>
<p>第六步进行换源(由于国外源很慢，可以考虑使用国内的源这样会在下载的时候快点)</p>
<p>输入一下内容备份原文件：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line">sudo <span class="built_in">cp</span> /etc/apt/sources.list.d/raspi.list /etc/apt/sources.list.d/raspi.list.bak</span><br></pre></td></tr></table></figure></p>
<p>修改系统源文件：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/apt/sources.list</span><br></pre></td></tr></table></figure></p>
<p>进入文件编辑模式，添加以下内容(将初始的源使用#注释掉，添加如下两行清华的镜像源)<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main contrib non-free rpi</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main contrib non-free rpi</span><br></pre></td></tr></table></figure></p>
<p>编辑完成后使用快捷键ctrl+x退出编辑，输入y，保存更改。</p>
<p>更改系统源：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/apt/sources.list.d/raspi.list</span><br></pre></td></tr></table></figure></p>
<p>进入文件编辑模式，添加以下内容(将初始的源使用#注释掉，添加如下两行清华的镜像源)<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui</span><br></pre></td></tr></table></figure></p>
<p>执行更新<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure></p>
<p>注：如果更新后出现文件管理器闪退，或者桌面失去响应之类的问题。建议使用如下命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt full-upgrade</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派Hexo博客搭建</title>
    <url>/2023/03/17/%E6%A0%91%E8%8E%93%E6%B4%BEHexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文将介绍如何使用Hexo+Github搭建个人博客(适用于Linux)。</p>
<p>说明：本片文章参考了CSDN，知乎，他人博客。特别感谢CSDN<a href="https://blog.csdn.net/qq_42293280/article/details/114487698?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-114487698-blog-104490335.pc_relevant_3mothn_strategy_recovery&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-114487698-blog-104490335.pc_relevant_3mothn_strategy_recovery&amp;utm_relevant_index=2">树莓派搭建个人博客</a>的作者 周-周 ，知乎<a href="https://zhuanlan.zhihu.com/p/26625249">GitHub+Hexo 搭建个人网站详细教程</a>的作者 知乎用户wdnLIq，个人博客<a href="https://homepea.top/2020/02.Hexo+Next/#more">记录Hexo建站</a>的作者Homepea。写这篇文章的目的在于记录下自己搭建Hexo博客的过程。</p>
<span id="more"></span>
<h1 id="创建GitHub的个人仓库"><a href="#创建GitHub的个人仓库" class="headerlink" title="创建GitHub的个人仓库"></a>创建GitHub的个人仓库</h1><p>登录到<a href="https://github.com/">GitHub</a>，如果没有Github账号先<a href="https://github.com/signup?source=login">注册</a>，<a href="https://github.com/login">登录</a>完成后看到界面右上角有个 <strong>+</strong> 号，点击 <strong>+</strong> 号会有一个下拉菜单，点击 <strong>New repository</strong> 创建个人仓库。</p>
<p>[图片待更新]</p>
<p>进入 <strong>Create a new repository</strong> 界面，下方有一个 <strong>Repository name</strong> 在下面方框内输入仓库名: 用户名.github.io(注意:必须以.github.io结尾，这是固定写法)。例如: faimhr.github.io</p>
<p>[图片待更新]</p>
<h1 id="相关软件配置"><a href="#相关软件配置" class="headerlink" title="相关软件配置"></a>相关软件配置</h1><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>用putty进入终端输入以下命令，安装git</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure>
<p>注: git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。是Linux  Torvalds为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件。</p>
<p>在终端输入一下命令修改全局用户名(需要修改双引号中的内容)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你的GitHub/Gitee用户名&quot;</span>  </span><br><span class="line">git config --global user.email <span class="string">&quot;你的GitHub/Gitee邮箱&quot;</span></span><br></pre></td></tr></table></figure>
<p>在终端输入以下命令查看是否修改成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure>
<p>如果能看到刚刚输入的 <strong>用户名和邮箱</strong> ，说明已经修改完成了。</p>
<p>[图片待更新]</p>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>首先查看树莓派的架构，树莓派终端输入命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">uname</span> -a</span><br></pre></td></tr></table></figure>
<p>[图片待更新]</p>
<p>此处armv71表示是armv7架构的，记住这个下一步会用到。</p>
<p>登录<a href="https://nodejs.org/en/download">Nood.js官网</a>找到对应的型号。</p>
<p>目前最新的版本是 <strong>18.15.0</strong> ，可以选择其他的版本只需要修改版本号就行。(如果最新版本安装不成功也可以试试其他的版本)</p>
<p>在终端输入以下命令: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v18.15.0/node-v18.15.0-linux-armv7l.tar.xz</span><br></pre></td></tr></table></figure>
<p>由于是国外网站下载可能会比较慢，可以使用国内的镜像进行下载。</p>
<p>在终端中输入以下命令: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://cdn.npm.taobao.org/dist/node/latest-v18.x/node-v18.15.0-linux-armv7l.tar.xz</span><br></pre></td></tr></table></figure>
<p>下载完成后，会得到一个二进制压缩包，需要对其进行解压。</p>
<p>在终端中输入以下命令: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xz -d node-v18.15.0-linux-armv7l.tar.xz &amp;&amp; tar -xavf node-v18.15.0-linux-armv7l.tar</span><br></pre></td></tr></table></figure>
<p>如果失败请尝试以下命令: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo xz -d node-v18.15.0-linux-armv7l.tar.xz &amp;&amp; sudo tar -xavf node-v18.15.0-linux-armv7l.tar</span><br></pre></td></tr></table></figure>
<p>如果还不成功建议尝试其他版本，参考文章使用了 <strong>v14.15.4</strong> </p>
<p>解压后，将解压文件移动到 <strong>/usr/local/node</strong> 下，在终端输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mv</span> ./node-v18.15.0-linux-armv7l /usr/local/node</span><br></pre></td></tr></table></figure>
<p>然后为 <strong>node</strong> 和 <strong>npm</strong> 建立软连接，在终端输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s /usr/local/node/bin/node /usr/bin/node</span><br><span class="line">sudo <span class="built_in">ln</span> -s /usr/local/node/bin/npm /usr/bin/npm</span><br><span class="line"><span class="comment">#这类似于Windows中的快捷方式</span></span><br></pre></td></tr></table></figure>
<p>可以通过以下命令检测Node.js是否安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>
<p>可以通过以下命令检测npm是否安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<p>显示正确的版本号后说明已经完成了安装，接下来准备安装 <strong>hexo</strong> 博客框架。</p>
<h1 id="Hexo博客搭建"><a href="#Hexo博客搭建" class="headerlink" title="Hexo博客搭建"></a>Hexo博客搭建</h1><p>首先在终端输入以下命令回到树莓派根目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span></span><br></pre></td></tr></table></figure>
<p>接下来需要给Hexo创建一个文件夹来存放博客相关的内容，文件夹的名字可以任意，这里以blog为例。</p>
<p>在终端输入以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> blog</span><br></pre></td></tr></table></figure>
<p>在终端输入以下命令进入刚刚创建的文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure>
<p>进入文件夹后将初始化Hexo，在终端中输入以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo hexo init</span><br></pre></td></tr></table></figure>
<p>启动Hexo，在终端中输入以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo hexo s</span><br></pre></td></tr></table></figure>
<p>终端会出现一个 <strong>网址</strong> ，并说按 <strong>ctrl + c</strong> 退出</p>
<p>[图片待更新]</p>
<p>此时在退出前可以在 <strong>树莓派浏览器</strong> 输入 <strong>该网址</strong> 查看搭建的博客，也可以在与树莓派连接 <strong>同一个网络电脑的浏览器</strong> 上输入 <strong>树莓派IP:4000</strong> 查看搭建的博客。</p>
<p>打开后我们可以看到一篇Hexo自动生成的标题为 <strong>Hello World</strong> 的文章，简述了Hexo的用法，可以自行查看。</p>
<p>[图片待更新]</p>
<p>回到终端按 <strong>ctrl + c</strong> 退出浏览，此时就完成了Hexo本地的搭建，接下来将把本地的Hexo部署到一开始创建的GitHub个人仓库中，实现可以随时随地打开个人博客。</p>
<h1 id="本地的Hexo部署到GitHub个人仓库中"><a href="#本地的Hexo部署到GitHub个人仓库中" class="headerlink" title="本地的Hexo部署到GitHub个人仓库中"></a>本地的Hexo部署到GitHub个人仓库中</h1><p>首先在终端输入以下命令进入博客的根目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure>
<p>注意：如果此时终端还在其他文件夹中，必须先回到根目录下再进行以上操作。</p>
<p>进入博客根目录后，需要安装一个Hexo的上传插件(保证后面本地到GitHub的部署)，在终端中输入以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>
<p>安装完成后，需要修改Hexo配置文件指定仓库路径</p>
<p>我们先找到博客根目录下的配置文件 <strong>_config.yml</strong> ，后面我们统一称其为 <strong>站点配置文件</strong></p>
<p>在博客根目录下输入以下命令可以查看该文件夹下 <strong>除了隐藏文件的所有文件</strong> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure>
<p>输入以下命令可以查看该文件夹下 <strong>所有文件</strong> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -a</span><br></pre></td></tr></table></figure>
<p>此时我们一定能看到一个名字是 <strong>_config.yml</strong> 的文件，输入以下命令进入该文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano _config.yml</span><br></pre></td></tr></table></figure>
<p>进入_config.yml后，找到deploy: (可以用 <strong>ctrl + w</strong> 搜索)，在后面修改或增加以下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/你的账户名/你的账户名.github.io</span><br><span class="line">  branch: master</span><br><span class="line">  <span class="comment"># 注意这里的冒号后要加空格！！！</span></span><br></pre></td></tr></table></figure>
<p>修改完成后，按 <strong>ctrl + x</strong> 退出文件编辑，提示是否保存，输入 <strong>y</strong> 保存，提示文件名是否修改，不修改直接按 <strong>回车</strong>。</p>
<p>完成后在终端中输入以下命令，确保终端在博客的根目录下，这时终端的确是在博客根目录下，但以后自己修改其他文件的时候可能结束编辑后不在这个位置了， <strong>要对博客进行部署操作要在博客根目录文件夹下进行操作！</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure>
<p>然后在终端依次执行以下三条命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo hexo clean</span><br><span class="line">sudo hexo g</span><br><span class="line">sudo hexo s</span><br></pre></td></tr></table></figure>
<p>当然也可以直接输入以下命令，它会自动依次执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo hexo clean &amp;&amp; sudo hexo g &amp;&amp; sudo hexo s</span><br></pre></td></tr></table></figure>
<p>sudo hexo clean 是用于清理缓存文件</p>
<p>sudo hexo g 是用于重新生成静态文件</p>
<p>sudo hexo s 是用于启动本地服务器</p>
<p>以上三步完成后按 <strong>ctrl + c</strong> 退出</p>
<p>在终端中输入以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo hexo d</span><br></pre></td></tr></table></figure>
<p>sudo hexo d 是用于把静态文件部署到设定的仓库</p>
<p>如果没有错误的话，终端上会要求输入你的GitHub用户名和密码，此处需要注意了。</p>
<p>在2021年8月14日开始github官方就加强安全访问。不能通过原有账号密码git访问，密码需要用官方的token或者采用ssh公私钥访问。否则会出现：鉴权失败（用户名密码错误）</p>
<p>[图片待更新]</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">官方原话：</span><br><span class="line">近年来，GitHub 客户受益于 GitHub.com 的许多安全增强功能，例如双因素身份验证、登录警报、经过验证的设备、防止使用泄露密码和 WebAuthn 支持。 这些功能使攻击者更难获取在多个网站上重复使用的密码并使用它来尝试访问您的 GitHub 帐户。 尽管有这些改进，但由于历史原因，未启用双因素身份验证的客户仍能够仅使用其GitHub 用户名和密码继续对 Git 和 API 操作进行身份验证。</span><br><span class="line">从 2021 年 8 月 13 日开始，我们将在对 Git 操作进行身份验证时不再接受帐户密码，并将要求使用基于令牌（token）的身份验证，例如个人访问令牌（针对开发人员）或 OAuth 或 GitHub 应用程序安装令牌（针对集成商） GitHub.com 上所有经过身份验证的 Git 操作。 您也可以继续在您喜欢的地方使用 SSH 密钥</span><br></pre></td></tr></table></figure>
<p>那么就需要获得token或者ssh公私钥。</p>
<p>如何获得token</p>
<p>登录github点击 <strong>右上角头像旁边的下拉菜单</strong> 选择 <strong>setting-&gt; Developer Settings-&gt; Prosonal access tokens -&gt; Tokens(classic)</strong> 点进去右边会看到 <strong>Generate new token</strong> ，点击并选择 <strong>Generate new token(classic)</strong> 进去后 <strong>Note栏</strong> <strong>任意</strong>取一个名字就行，<strong>Expiration</strong> 需要选择一个有效期，按自己的喜好选就行，嫌麻烦就选 No Expiration ，选完后拉到最下面点击 <strong>Generate token</strong> 这样创建一个新token，此时页面会跳转，需要把新token复制下来保存好就行了，每次更新复制粘贴就行了。</p>
<p>[图片待更新]</p>
<p>此时回到终端输入GitHub用户名和token即可。</p>
<p>注：网上有能直接使用公钥跳过每次输入用户名和密码的步骤，但是我没有成功，还不知道问题在哪里，要是找到问题后面再更新。</p>
<p>终端出现 <strong>INFO Deplay done: git</strong> 说明已经部署成功了。</p>
<p>此时可以在任意手机电脑的浏览器输入仓库的名字就能随时进行访问了。</p>
<p>到这里 GitHub+Hexo 搭建的个人网站就顺利完成了！后面就可以在 <strong>blog/source/_posts/</strong> 这个文件夹下写文章了，所有博客都是以 <strong>.md</strong> 格式保存的。当然hexo博客支持很多不同的主题，可以对自己的博客进行美化，这就后面在Hexo博客美化文章中更新吧。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>罗技FLOW连接问题</title>
    <url>/2023/04/20/%E7%BD%97%E6%8A%80flow%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文解决 <strong>Logi Options+</strong> <strong>flow功能</strong> 时遇到的死活找不到配对电脑的问题。</p>
<p>说明：问题的起因是想在两台电脑之间共用一个鼠标。</p>
<span id="more"></span>
<p>本人用的是罗技master3鼠标，想要在两台电脑之间使用同一个鼠标且不需要按切换按钮。步骤如下：</p>
<h1 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h1><p>在两台电脑上下载 <a href="https://www.logitech.com.cn/zh-cn/setup/mxsetup/logi-options.html">Logi Options+</a> 软件,并完成鼠标配对。</p>
<h1 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h1><p>保持两台电脑处于同一个网络或局域网下，分别点击两台电脑 <strong>Logi Options+</strong> 下的 <strong>FLOW</strong> 尝试进行连接。如果前面设置正确并显示 <strong>未找到电脑</strong> 请往下看。</p>
<h1 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h1><p>找了很久方法，有让两台电脑重新下软件的，有重启路由器的……没成功</p>
<p>最后采用以下方法解决问题：</p>
<p>win10找到 <strong>设置</strong> —&gt; <strong>主页</strong> —&gt; <strong>更新与安全</strong> —&gt; <strong>Windows安全中心</strong> —&gt; <strong>防火墙与网络保护</strong> —&gt; <strong>高级设置</strong> —&gt; <strong>入站规则/出站规则</strong></p>
<p>找到所有 <strong>Logi Options+ Agent</strong> 右击 <strong>属性</strong> ，找到 <strong>常规</strong> —&gt; <strong>操作</strong> —&gt; <strong>允许连接</strong></p>
<p>重复第二步操作就可以了</p>
]]></content>
      <categories>
        <category>通信协议</category>
      </categories>
      <tags>
        <tag>通信协议</tag>
      </tags>
  </entry>
</search>
